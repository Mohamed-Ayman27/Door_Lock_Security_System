
HIMI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010a  00800060  00002e90  00002f24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080016a  0080016a  0000302e  2**0
                  ALLOC
  3 .stab         00002c40  00000000  00000000  00003030  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012d6  00000000  00000000  00005c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006f46  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007086  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000071f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000aad8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ac38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000aec5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b693  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 d6 14 	jmp	0x29ac	; 0x29ac <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 a3 14 	jmp	0x2946	; 0x2946 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e9       	ldi	r30, 0x90	; 144
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 37       	cpi	r26, 0x76	; 118
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 46 17 	jmp	0x2e8c	; 0x2e8c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ca 16 	jmp	0x2d94	; 0x2d94 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e5       	ldi	r26, 0x54	; 84
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e6 16 	jmp	0x2dcc	; 0x2dcc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d6 16 	jmp	0x2dac	; 0x2dac <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f2 16 	jmp	0x2de4	; 0x2de4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d6 16 	jmp	0x2dac	; 0x2dac <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f2 16 	jmp	0x2de4	; 0x2de4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ca 16 	jmp	0x2d94	; 0x2d94 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e5       	ldi	r24, 0x54	; 84
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e6 16 	jmp	0x2dcc	; 0x2dcc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d6 16 	jmp	0x2dac	; 0x2dac <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f2 16 	jmp	0x2de4	; 0x2de4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d6 16 	jmp	0x2dac	; 0x2dac <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f2 16 	jmp	0x2de4	; 0x2de4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d6 16 	jmp	0x2dac	; 0x2dac <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f2 16 	jmp	0x2de4	; 0x2de4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 da 16 	jmp	0x2db4	; 0x2db4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f6 16 	jmp	0x2dec	; 0x2dec <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
#include "HIMI.h"



int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	ab 97       	sbiw	r28, 0x2b	; 43
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	/* Variable to store the pressed key */
	uint8 key_option;

	SREG  |= ( 1 << 7 ); /* Enable Global Interrupts */
     b5a:	af e5       	ldi	r26, 0x5F	; 95
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ef e5       	ldi	r30, 0x5F	; 95
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	8c 93       	st	X, r24

	/* Initialize the UART with Configuration */
	UART_ConfigType UART_Config = {EIGHT_BIT, DISABLED, One_Bit,9600};
     b68:	9e 01       	movw	r18, r28
     b6a:	22 5e       	subi	r18, 0xE2	; 226
     b6c:	3f 4f       	sbci	r19, 0xFF	; 255
     b6e:	38 a7       	std	Y+40, r19	; 0x28
     b70:	2f a3       	std	Y+39, r18	; 0x27
     b72:	8c e5       	ldi	r24, 0x5C	; 92
     b74:	91 e0       	ldi	r25, 0x01	; 1
     b76:	9a a7       	std	Y+42, r25	; 0x2a
     b78:	89 a7       	std	Y+41, r24	; 0x29
     b7a:	97 e0       	ldi	r25, 0x07	; 7
     b7c:	9b a7       	std	Y+43, r25	; 0x2b
     b7e:	e9 a5       	ldd	r30, Y+41	; 0x29
     b80:	fa a5       	ldd	r31, Y+42	; 0x2a
     b82:	00 80       	ld	r0, Z
     b84:	29 a5       	ldd	r18, Y+41	; 0x29
     b86:	3a a5       	ldd	r19, Y+42	; 0x2a
     b88:	2f 5f       	subi	r18, 0xFF	; 255
     b8a:	3f 4f       	sbci	r19, 0xFF	; 255
     b8c:	3a a7       	std	Y+42, r19	; 0x2a
     b8e:	29 a7       	std	Y+41, r18	; 0x29
     b90:	ef a1       	ldd	r30, Y+39	; 0x27
     b92:	f8 a5       	ldd	r31, Y+40	; 0x28
     b94:	00 82       	st	Z, r0
     b96:	2f a1       	ldd	r18, Y+39	; 0x27
     b98:	38 a5       	ldd	r19, Y+40	; 0x28
     b9a:	2f 5f       	subi	r18, 0xFF	; 255
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	38 a7       	std	Y+40, r19	; 0x28
     ba0:	2f a3       	std	Y+39, r18	; 0x27
     ba2:	3b a5       	ldd	r19, Y+43	; 0x2b
     ba4:	31 50       	subi	r19, 0x01	; 1
     ba6:	3b a7       	std	Y+43, r19	; 0x2b
     ba8:	8b a5       	ldd	r24, Y+43	; 0x2b
     baa:	88 23       	and	r24, r24
     bac:	41 f7       	brne	.-48     	; 0xb7e <main+0x38>
	UART_init(&UART_Config);
     bae:	ce 01       	movw	r24, r28
     bb0:	4e 96       	adiw	r24, 0x1e	; 30
     bb2:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <UART_init>

	/* Initialize LCD */
	LCD_init();
     bb6:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <LCD_init>

	/* Welcome message and Important note */
	LCD_moveCursor(0, 5);
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	65 e0       	ldi	r22, 0x05	; 5
     bbe:	0e 94 1b 14 	call	0x2836	; 0x2836 <LCD_moveCursor>
	LCD_displayString("Welcome");
     bc2:	80 e6       	ldi	r24, 0x60	; 96
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <LCD_displayString>
	LCD_moveCursor(1, 0);
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	0e 94 1b 14 	call	0x2836	; 0x2836 <LCD_moveCursor>
	LCD_displayString("'=' to use Enter");
     bd2:	88 e6       	ldi	r24, 0x68	; 104
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <LCD_displayString>
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	90 e8       	ldi	r25, 0x80	; 128
     bde:	ab eb       	ldi	r26, 0xBB	; 187
     be0:	b4 e4       	ldi	r27, 0x44	; 68
     be2:	89 8f       	std	Y+25, r24	; 0x19
     be4:	9a 8f       	std	Y+26, r25	; 0x1a
     be6:	ab 8f       	std	Y+27, r26	; 0x1b
     be8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bea:	69 8d       	ldd	r22, Y+25	; 0x19
     bec:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bee:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bf0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	4a ef       	ldi	r20, 0xFA	; 250
     bf8:	54 e4       	ldi	r21, 0x44	; 68
     bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bfe:	dc 01       	movw	r26, r24
     c00:	cb 01       	movw	r24, r22
     c02:	8d 8b       	std	Y+21, r24	; 0x15
     c04:	9e 8b       	std	Y+22, r25	; 0x16
     c06:	af 8b       	std	Y+23, r26	; 0x17
     c08:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c0a:	6d 89       	ldd	r22, Y+21	; 0x15
     c0c:	7e 89       	ldd	r23, Y+22	; 0x16
     c0e:	8f 89       	ldd	r24, Y+23	; 0x17
     c10:	98 8d       	ldd	r25, Y+24	; 0x18
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	40 e8       	ldi	r20, 0x80	; 128
     c18:	5f e3       	ldi	r21, 0x3F	; 63
     c1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c1e:	88 23       	and	r24, r24
     c20:	2c f4       	brge	.+10     	; 0xc2c <main+0xe6>
		__ticks = 1;
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	9c 8b       	std	Y+20, r25	; 0x14
     c28:	8b 8b       	std	Y+19, r24	; 0x13
     c2a:	3f c0       	rjmp	.+126    	; 0xcaa <main+0x164>
	else if (__tmp > 65535)
     c2c:	6d 89       	ldd	r22, Y+21	; 0x15
     c2e:	7e 89       	ldd	r23, Y+22	; 0x16
     c30:	8f 89       	ldd	r24, Y+23	; 0x17
     c32:	98 8d       	ldd	r25, Y+24	; 0x18
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	3f ef       	ldi	r19, 0xFF	; 255
     c38:	4f e7       	ldi	r20, 0x7F	; 127
     c3a:	57 e4       	ldi	r21, 0x47	; 71
     c3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c40:	18 16       	cp	r1, r24
     c42:	4c f5       	brge	.+82     	; 0xc96 <main+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c44:	69 8d       	ldd	r22, Y+25	; 0x19
     c46:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c48:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c4c:	20 e0       	ldi	r18, 0x00	; 0
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	40 e2       	ldi	r20, 0x20	; 32
     c52:	51 e4       	ldi	r21, 0x41	; 65
     c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c58:	dc 01       	movw	r26, r24
     c5a:	cb 01       	movw	r24, r22
     c5c:	bc 01       	movw	r22, r24
     c5e:	cd 01       	movw	r24, r26
     c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c64:	dc 01       	movw	r26, r24
     c66:	cb 01       	movw	r24, r22
     c68:	9c 8b       	std	Y+20, r25	; 0x14
     c6a:	8b 8b       	std	Y+19, r24	; 0x13
     c6c:	0f c0       	rjmp	.+30     	; 0xc8c <main+0x146>
     c6e:	88 ec       	ldi	r24, 0xC8	; 200
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	9a 8b       	std	Y+18, r25	; 0x12
     c74:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c76:	89 89       	ldd	r24, Y+17	; 0x11
     c78:	9a 89       	ldd	r25, Y+18	; 0x12
     c7a:	01 97       	sbiw	r24, 0x01	; 1
     c7c:	f1 f7       	brne	.-4      	; 0xc7a <main+0x134>
     c7e:	9a 8b       	std	Y+18, r25	; 0x12
     c80:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c82:	8b 89       	ldd	r24, Y+19	; 0x13
     c84:	9c 89       	ldd	r25, Y+20	; 0x14
     c86:	01 97       	sbiw	r24, 0x01	; 1
     c88:	9c 8b       	std	Y+20, r25	; 0x14
     c8a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c8c:	8b 89       	ldd	r24, Y+19	; 0x13
     c8e:	9c 89       	ldd	r25, Y+20	; 0x14
     c90:	00 97       	sbiw	r24, 0x00	; 0
     c92:	69 f7       	brne	.-38     	; 0xc6e <main+0x128>
     c94:	14 c0       	rjmp	.+40     	; 0xcbe <main+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c96:	6d 89       	ldd	r22, Y+21	; 0x15
     c98:	7e 89       	ldd	r23, Y+22	; 0x16
     c9a:	8f 89       	ldd	r24, Y+23	; 0x17
     c9c:	98 8d       	ldd	r25, Y+24	; 0x18
     c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ca2:	dc 01       	movw	r26, r24
     ca4:	cb 01       	movw	r24, r22
     ca6:	9c 8b       	std	Y+20, r25	; 0x14
     ca8:	8b 8b       	std	Y+19, r24	; 0x13
     caa:	8b 89       	ldd	r24, Y+19	; 0x13
     cac:	9c 89       	ldd	r25, Y+20	; 0x14
     cae:	98 8b       	std	Y+16, r25	; 0x10
     cb0:	8f 87       	std	Y+15, r24	; 0x0f
     cb2:	8f 85       	ldd	r24, Y+15	; 0x0f
     cb4:	98 89       	ldd	r25, Y+16	; 0x10
     cb6:	01 97       	sbiw	r24, 0x01	; 1
     cb8:	f1 f7       	brne	.-4      	; 0xcb6 <main+0x170>
     cba:	98 8b       	std	Y+16, r25	; 0x10
     cbc:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(WLCOME_WAIT_TIME);
	LCD_clearScreen();
     cbe:	0e 94 99 14 	call	0x2932	; 0x2932 <LCD_clearScreen>
	LCD_moveCursor(0, 0);
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	60 e0       	ldi	r22, 0x00	; 0
     cc6:	0e 94 1b 14 	call	0x2836	; 0x2836 <LCD_moveCursor>

	LCD_displayString("Password 5 char");
     cca:	89 e7       	ldi	r24, 0x79	; 121
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <LCD_displayString>
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	90 e8       	ldi	r25, 0x80	; 128
     cd6:	ab eb       	ldi	r26, 0xBB	; 187
     cd8:	b4 e4       	ldi	r27, 0x44	; 68
     cda:	8b 87       	std	Y+11, r24	; 0x0b
     cdc:	9c 87       	std	Y+12, r25	; 0x0c
     cde:	ad 87       	std	Y+13, r26	; 0x0d
     ce0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ce2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ce4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ce6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ce8:	9e 85       	ldd	r25, Y+14	; 0x0e
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	4a ef       	ldi	r20, 0xFA	; 250
     cf0:	54 e4       	ldi	r21, 0x44	; 68
     cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cf6:	dc 01       	movw	r26, r24
     cf8:	cb 01       	movw	r24, r22
     cfa:	8f 83       	std	Y+7, r24	; 0x07
     cfc:	98 87       	std	Y+8, r25	; 0x08
     cfe:	a9 87       	std	Y+9, r26	; 0x09
     d00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d02:	6f 81       	ldd	r22, Y+7	; 0x07
     d04:	78 85       	ldd	r23, Y+8	; 0x08
     d06:	89 85       	ldd	r24, Y+9	; 0x09
     d08:	9a 85       	ldd	r25, Y+10	; 0x0a
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	40 e8       	ldi	r20, 0x80	; 128
     d10:	5f e3       	ldi	r21, 0x3F	; 63
     d12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d16:	88 23       	and	r24, r24
     d18:	2c f4       	brge	.+10     	; 0xd24 <main+0x1de>
		__ticks = 1;
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	9e 83       	std	Y+6, r25	; 0x06
     d20:	8d 83       	std	Y+5, r24	; 0x05
     d22:	3f c0       	rjmp	.+126    	; 0xda2 <main+0x25c>
	else if (__tmp > 65535)
     d24:	6f 81       	ldd	r22, Y+7	; 0x07
     d26:	78 85       	ldd	r23, Y+8	; 0x08
     d28:	89 85       	ldd	r24, Y+9	; 0x09
     d2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d2c:	20 e0       	ldi	r18, 0x00	; 0
     d2e:	3f ef       	ldi	r19, 0xFF	; 255
     d30:	4f e7       	ldi	r20, 0x7F	; 127
     d32:	57 e4       	ldi	r21, 0x47	; 71
     d34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d38:	18 16       	cp	r1, r24
     d3a:	4c f5       	brge	.+82     	; 0xd8e <main+0x248>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d3c:	6b 85       	ldd	r22, Y+11	; 0x0b
     d3e:	7c 85       	ldd	r23, Y+12	; 0x0c
     d40:	8d 85       	ldd	r24, Y+13	; 0x0d
     d42:	9e 85       	ldd	r25, Y+14	; 0x0e
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	40 e2       	ldi	r20, 0x20	; 32
     d4a:	51 e4       	ldi	r21, 0x41	; 65
     d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d50:	dc 01       	movw	r26, r24
     d52:	cb 01       	movw	r24, r22
     d54:	bc 01       	movw	r22, r24
     d56:	cd 01       	movw	r24, r26
     d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d5c:	dc 01       	movw	r26, r24
     d5e:	cb 01       	movw	r24, r22
     d60:	9e 83       	std	Y+6, r25	; 0x06
     d62:	8d 83       	std	Y+5, r24	; 0x05
     d64:	0f c0       	rjmp	.+30     	; 0xd84 <main+0x23e>
     d66:	88 ec       	ldi	r24, 0xC8	; 200
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	9c 83       	std	Y+4, r25	; 0x04
     d6c:	8b 83       	std	Y+3, r24	; 0x03
     d6e:	8b 81       	ldd	r24, Y+3	; 0x03
     d70:	9c 81       	ldd	r25, Y+4	; 0x04
     d72:	01 97       	sbiw	r24, 0x01	; 1
     d74:	f1 f7       	brne	.-4      	; 0xd72 <main+0x22c>
     d76:	9c 83       	std	Y+4, r25	; 0x04
     d78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d7a:	8d 81       	ldd	r24, Y+5	; 0x05
     d7c:	9e 81       	ldd	r25, Y+6	; 0x06
     d7e:	01 97       	sbiw	r24, 0x01	; 1
     d80:	9e 83       	std	Y+6, r25	; 0x06
     d82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d84:	8d 81       	ldd	r24, Y+5	; 0x05
     d86:	9e 81       	ldd	r25, Y+6	; 0x06
     d88:	00 97       	sbiw	r24, 0x00	; 0
     d8a:	69 f7       	brne	.-38     	; 0xd66 <main+0x220>
     d8c:	14 c0       	rjmp	.+40     	; 0xdb6 <main+0x270>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d8e:	6f 81       	ldd	r22, Y+7	; 0x07
     d90:	78 85       	ldd	r23, Y+8	; 0x08
     d92:	89 85       	ldd	r24, Y+9	; 0x09
     d94:	9a 85       	ldd	r25, Y+10	; 0x0a
     d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d9a:	dc 01       	movw	r26, r24
     d9c:	cb 01       	movw	r24, r22
     d9e:	9e 83       	std	Y+6, r25	; 0x06
     da0:	8d 83       	std	Y+5, r24	; 0x05
     da2:	8d 81       	ldd	r24, Y+5	; 0x05
     da4:	9e 81       	ldd	r25, Y+6	; 0x06
     da6:	9a 83       	std	Y+2, r25	; 0x02
     da8:	89 83       	std	Y+1, r24	; 0x01
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	9a 81       	ldd	r25, Y+2	; 0x02
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	f1 f7       	brne	.-4      	; 0xdae <main+0x268>
     db2:	9a 83       	std	Y+2, r25	; 0x02
     db4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(WLCOME_WAIT_TIME);
	LCD_clearScreen();
     db6:	0e 94 99 14 	call	0x2932	; 0x2932 <LCD_clearScreen>

	/*Set a New Password*/
	HIMI_setNewPass();
     dba:	0e 94 8f 07 	call	0xf1e	; 0xf1e <HIMI_setNewPass>

	while(1)
	{
		HIMI_mainOptions();
     dbe:	0e 94 32 0a 	call	0x1464	; 0x1464 <HIMI_mainOptions>

		key_option = KEYPAD_getPressedKey();
     dc2:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <KEYPAD_getPressedKey>
     dc6:	8d 8f       	std	Y+29, r24	; 0x1d

		switch (key_option)
     dc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dca:	e8 2f       	mov	r30, r24
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	fe a3       	std	Y+38, r31	; 0x26
     dd0:	ed a3       	std	Y+37, r30	; 0x25
     dd2:	2d a1       	ldd	r18, Y+37	; 0x25
     dd4:	3e a1       	ldd	r19, Y+38	; 0x26
     dd6:	2b 32       	cpi	r18, 0x2B	; 43
     dd8:	31 05       	cpc	r19, r1
     dda:	31 f0       	breq	.+12     	; 0xde8 <main+0x2a2>
     ddc:	8d a1       	ldd	r24, Y+37	; 0x25
     dde:	9e a1       	ldd	r25, Y+38	; 0x26
     de0:	8d 32       	cpi	r24, 0x2D	; 45
     de2:	91 05       	cpc	r25, r1
     de4:	f9 f0       	breq	.+62     	; 0xe24 <main+0x2de>
     de6:	eb cf       	rjmp	.-42     	; 0xdbe <main+0x278>
		{
		case OPEN_DOOR:
			HIMI_enterPass(); //ask user to input pass
     de8:	0e 94 47 0a 	call	0x148e	; 0x148e <HIMI_enterPass>

			HIMI_sendCommand(SEND_CHECK_PASS); //See mcu2 to check pass
     dec:	85 ef       	ldi	r24, 0xF5	; 245
     dee:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <HIMI_sendCommand>

			HIMI_sendPassword(g_Password);
     df2:	8a e6       	ldi	r24, 0x6A	; 106
     df4:	91 e0       	ldi	r25, 0x01	; 1
     df6:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <HIMI_sendPassword>

			HIMI_sendCommand(OPEN_DOOR);
     dfa:	8b e2       	ldi	r24, 0x2B	; 43
     dfc:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <HIMI_sendCommand>

			g_passStatus = HIMI_commandRecieve();
     e00:	0e 94 78 07 	call	0xef0	; 0xef0 <HIMI_commandRecieve>
     e04:	80 93 74 01 	sts	0x0174, r24

			if(g_passStatus == WRONG_PASS)
     e08:	80 91 74 01 	lds	r24, 0x0174
     e0c:	86 3f       	cpi	r24, 0xF6	; 246
     e0e:	19 f4       	brne	.+6      	; 0xe16 <main+0x2d0>
			{
				HIMI_wrongPass();
     e10:	0e 94 90 0a 	call	0x1520	; 0x1520 <HIMI_wrongPass>
     e14:	d4 cf       	rjmp	.-88     	; 0xdbe <main+0x278>
			}
			else if(g_passStatus == OPENING_DOOR)
     e16:	80 91 74 01 	lds	r24, 0x0174
     e1a:	87 3f       	cpi	r24, 0xF7	; 247
     e1c:	81 f6       	brne	.-96     	; 0xdbe <main+0x278>
			{
				HIMI_openDoor();
     e1e:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <HIMI_openDoor>
     e22:	cd cf       	rjmp	.-102    	; 0xdbe <main+0x278>
			}
			break;

		case CHANGE_PASS:
			HIMI_enterPass(); //ask user to input pass
     e24:	0e 94 47 0a 	call	0x148e	; 0x148e <HIMI_enterPass>

			HIMI_sendCommand(SEND_CHECK_PASS); //See mcu2 to check pass
     e28:	85 ef       	ldi	r24, 0xF5	; 245
     e2a:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <HIMI_sendCommand>

			HIMI_sendPassword(g_Password);
     e2e:	8a e6       	ldi	r24, 0x6A	; 106
     e30:	91 e0       	ldi	r25, 0x01	; 1
     e32:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <HIMI_sendPassword>

			HIMI_sendCommand(CHANGE_PASS);
     e36:	8d e2       	ldi	r24, 0x2D	; 45
     e38:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <HIMI_sendCommand>

			g_passStatus = HIMI_commandRecieve();
     e3c:	0e 94 78 07 	call	0xef0	; 0xef0 <HIMI_commandRecieve>
     e40:	80 93 74 01 	sts	0x0174, r24

			if(g_passStatus ==  CHANGING_PASSWORD)
     e44:	80 91 74 01 	lds	r24, 0x0174
     e48:	88 3f       	cpi	r24, 0xF8	; 248
     e4a:	19 f4       	brne	.+6      	; 0xe52 <main+0x30c>
			{
				HIMI_setNewPass();
     e4c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <HIMI_setNewPass>
     e50:	b6 cf       	rjmp	.-148    	; 0xdbe <main+0x278>
			}
			/* In case the two passwords did not match */
			else if(g_passStatus == WRONG_PASS)
     e52:	80 91 74 01 	lds	r24, 0x0174
     e56:	86 3f       	cpi	r24, 0xF6	; 246
     e58:	09 f0       	breq	.+2      	; 0xe5c <main+0x316>
     e5a:	b1 cf       	rjmp	.-158    	; 0xdbe <main+0x278>
			{
				HIMI_wrongPass();
     e5c:	0e 94 90 0a 	call	0x1520	; 0x1520 <HIMI_wrongPass>
     e60:	ae cf       	rjmp	.-164    	; 0xdbe <main+0x278>

00000e62 <HIMI_TimerCallBackProcessing>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void HIMI_TimerCallBackProcessing(void)
{
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
	g_tick++; /* Increment the counter */
     e6a:	80 91 70 01 	lds	r24, 0x0170
     e6e:	8f 5f       	subi	r24, 0xFF	; 255
     e70:	80 93 70 01 	sts	0x0170, r24
}
     e74:	cf 91       	pop	r28
     e76:	df 91       	pop	r29
     e78:	08 95       	ret

00000e7a <HIMI_startTimer>:
 * PreScaler = 1024
 * CTC ode
 * Compare Value= 7812.5
 */
void HIMI_startTimer(void)
{
     e7a:	df 93       	push	r29
     e7c:	cf 93       	push	r28
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	2b 97       	sbiw	r28, 0x0b	; 11
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	cd bf       	out	0x3d, r28	; 61
	/* Setup Timer Configuration */
	Timer1_ConfigType TIMER_Config = { 0 ,7813, TIMER_PRE_1024, TIMER_CTC};
     e8e:	ce 01       	movw	r24, r28
     e90:	01 96       	adiw	r24, 0x01	; 1
     e92:	98 87       	std	Y+8, r25	; 0x08
     e94:	8f 83       	std	Y+7, r24	; 0x07
     e96:	e3 e6       	ldi	r30, 0x63	; 99
     e98:	f1 e0       	ldi	r31, 0x01	; 1
     e9a:	fa 87       	std	Y+10, r31	; 0x0a
     e9c:	e9 87       	std	Y+9, r30	; 0x09
     e9e:	f6 e0       	ldi	r31, 0x06	; 6
     ea0:	fb 87       	std	Y+11, r31	; 0x0b
     ea2:	e9 85       	ldd	r30, Y+9	; 0x09
     ea4:	fa 85       	ldd	r31, Y+10	; 0x0a
     ea6:	00 80       	ld	r0, Z
     ea8:	89 85       	ldd	r24, Y+9	; 0x09
     eaa:	9a 85       	ldd	r25, Y+10	; 0x0a
     eac:	01 96       	adiw	r24, 0x01	; 1
     eae:	9a 87       	std	Y+10, r25	; 0x0a
     eb0:	89 87       	std	Y+9, r24	; 0x09
     eb2:	ef 81       	ldd	r30, Y+7	; 0x07
     eb4:	f8 85       	ldd	r31, Y+8	; 0x08
     eb6:	00 82       	st	Z, r0
     eb8:	8f 81       	ldd	r24, Y+7	; 0x07
     eba:	98 85       	ldd	r25, Y+8	; 0x08
     ebc:	01 96       	adiw	r24, 0x01	; 1
     ebe:	98 87       	std	Y+8, r25	; 0x08
     ec0:	8f 83       	std	Y+7, r24	; 0x07
     ec2:	9b 85       	ldd	r25, Y+11	; 0x0b
     ec4:	91 50       	subi	r25, 0x01	; 1
     ec6:	9b 87       	std	Y+11, r25	; 0x0b
     ec8:	eb 85       	ldd	r30, Y+11	; 0x0b
     eca:	ee 23       	and	r30, r30
     ecc:	51 f7       	brne	.-44     	; 0xea2 <HIMI_startTimer+0x28>

	/* Initialize the Timer */
	Timer1_init(&TIMER_Config);
     ece:	ce 01       	movw	r24, r28
     ed0:	01 96       	adiw	r24, 0x01	; 1
     ed2:	0e 94 09 15 	call	0x2a12	; 0x2a12 <Timer1_init>

	/* Set Call Back function for the timer */
	Timer1_setCallBack(HIMI_TimerCallBackProcessing);
     ed6:	81 e3       	ldi	r24, 0x31	; 49
     ed8:	97 e0       	ldi	r25, 0x07	; 7
     eda:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <Timer1_setCallBack>
}
     ede:	2b 96       	adiw	r28, 0x0b	; 11
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	f8 94       	cli
     ee4:	de bf       	out	0x3e, r29	; 62
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	cd bf       	out	0x3d, r28	; 61
     eea:	cf 91       	pop	r28
     eec:	df 91       	pop	r29
     eee:	08 95       	ret

00000ef0 <HIMI_commandRecieve>:



uint8 HIMI_commandRecieve(void)
{
     ef0:	df 93       	push	r29
     ef2:	cf 93       	push	r28
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
	while(UART_recieveByte() != READY_SEND);
     ef8:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <UART_recieveByte>
     efc:	80 3f       	cpi	r24, 0xF0	; 240
     efe:	e1 f7       	brne	.-8      	; 0xef8 <HIMI_commandRecieve+0x8>

	UART_sendByte(READY_RECIEVE);
     f00:	81 ef       	ldi	r24, 0xF1	; 241
     f02:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <UART_sendByte>

	g_command = UART_recieveByte();
     f06:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <UART_recieveByte>
     f0a:	80 93 75 01 	sts	0x0175, r24

	UART_sendByte(RECIEVE_DONE);
     f0e:	82 ef       	ldi	r24, 0xF2	; 242
     f10:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <UART_sendByte>

	return g_command;
     f14:	80 91 75 01 	lds	r24, 0x0175
}
     f18:	cf 91       	pop	r28
     f1a:	df 91       	pop	r29
     f1c:	08 95       	ret

00000f1e <HIMI_setNewPass>:

void HIMI_setNewPass()
{
     f1e:	df 93       	push	r29
     f20:	cf 93       	push	r28
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	6c 97       	sbiw	r28, 0x1c	; 28
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	f8 94       	cli
     f2c:	de bf       	out	0x3e, r29	; 62
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	cd bf       	out	0x3d, r28	; 61
	g_passStatus = PASS_MIS_MATCHED;
     f32:	10 92 74 01 	sts	0x0174, r1
     f36:	27 c1       	rjmp	.+590    	; 0x1186 <HIMI_setNewPass+0x268>

	while(g_passStatus == PASS_MIS_MATCHED)
	{
		LCD_clearScreen();
     f38:	0e 94 99 14 	call	0x2932	; 0x2932 <LCD_clearScreen>
		LCD_moveCursor(0, 0);
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	0e 94 1b 14 	call	0x2836	; 0x2836 <LCD_moveCursor>
		LCD_displayString("**New Password**");
     f44:	89 e8       	ldi	r24, 0x89	; 137
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <LCD_displayString>
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	90 e8       	ldi	r25, 0x80	; 128
     f50:	ab eb       	ldi	r26, 0xBB	; 187
     f52:	b4 e4       	ldi	r27, 0x44	; 68
     f54:	89 8f       	std	Y+25, r24	; 0x19
     f56:	9a 8f       	std	Y+26, r25	; 0x1a
     f58:	ab 8f       	std	Y+27, r26	; 0x1b
     f5a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f5c:	69 8d       	ldd	r22, Y+25	; 0x19
     f5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f60:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f62:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	4a ef       	ldi	r20, 0xFA	; 250
     f6a:	54 e4       	ldi	r21, 0x44	; 68
     f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	8d 8b       	std	Y+21, r24	; 0x15
     f76:	9e 8b       	std	Y+22, r25	; 0x16
     f78:	af 8b       	std	Y+23, r26	; 0x17
     f7a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f7c:	6d 89       	ldd	r22, Y+21	; 0x15
     f7e:	7e 89       	ldd	r23, Y+22	; 0x16
     f80:	8f 89       	ldd	r24, Y+23	; 0x17
     f82:	98 8d       	ldd	r25, Y+24	; 0x18
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	40 e8       	ldi	r20, 0x80	; 128
     f8a:	5f e3       	ldi	r21, 0x3F	; 63
     f8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f90:	88 23       	and	r24, r24
     f92:	2c f4       	brge	.+10     	; 0xf9e <HIMI_setNewPass+0x80>
		__ticks = 1;
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	9c 8b       	std	Y+20, r25	; 0x14
     f9a:	8b 8b       	std	Y+19, r24	; 0x13
     f9c:	3f c0       	rjmp	.+126    	; 0x101c <HIMI_setNewPass+0xfe>
	else if (__tmp > 65535)
     f9e:	6d 89       	ldd	r22, Y+21	; 0x15
     fa0:	7e 89       	ldd	r23, Y+22	; 0x16
     fa2:	8f 89       	ldd	r24, Y+23	; 0x17
     fa4:	98 8d       	ldd	r25, Y+24	; 0x18
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	3f ef       	ldi	r19, 0xFF	; 255
     faa:	4f e7       	ldi	r20, 0x7F	; 127
     fac:	57 e4       	ldi	r21, 0x47	; 71
     fae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fb2:	18 16       	cp	r1, r24
     fb4:	4c f5       	brge	.+82     	; 0x1008 <HIMI_setNewPass+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fb6:	69 8d       	ldd	r22, Y+25	; 0x19
     fb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fba:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	40 e2       	ldi	r20, 0x20	; 32
     fc4:	51 e4       	ldi	r21, 0x41	; 65
     fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	bc 01       	movw	r22, r24
     fd0:	cd 01       	movw	r24, r26
     fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fd6:	dc 01       	movw	r26, r24
     fd8:	cb 01       	movw	r24, r22
     fda:	9c 8b       	std	Y+20, r25	; 0x14
     fdc:	8b 8b       	std	Y+19, r24	; 0x13
     fde:	0f c0       	rjmp	.+30     	; 0xffe <HIMI_setNewPass+0xe0>
     fe0:	88 ec       	ldi	r24, 0xC8	; 200
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	9a 8b       	std	Y+18, r25	; 0x12
     fe6:	89 8b       	std	Y+17, r24	; 0x11
     fe8:	89 89       	ldd	r24, Y+17	; 0x11
     fea:	9a 89       	ldd	r25, Y+18	; 0x12
     fec:	01 97       	sbiw	r24, 0x01	; 1
     fee:	f1 f7       	brne	.-4      	; 0xfec <HIMI_setNewPass+0xce>
     ff0:	9a 8b       	std	Y+18, r25	; 0x12
     ff2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff4:	8b 89       	ldd	r24, Y+19	; 0x13
     ff6:	9c 89       	ldd	r25, Y+20	; 0x14
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	9c 8b       	std	Y+20, r25	; 0x14
     ffc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ffe:	8b 89       	ldd	r24, Y+19	; 0x13
    1000:	9c 89       	ldd	r25, Y+20	; 0x14
    1002:	00 97       	sbiw	r24, 0x00	; 0
    1004:	69 f7       	brne	.-38     	; 0xfe0 <HIMI_setNewPass+0xc2>
    1006:	14 c0       	rjmp	.+40     	; 0x1030 <HIMI_setNewPass+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1008:	6d 89       	ldd	r22, Y+21	; 0x15
    100a:	7e 89       	ldd	r23, Y+22	; 0x16
    100c:	8f 89       	ldd	r24, Y+23	; 0x17
    100e:	98 8d       	ldd	r25, Y+24	; 0x18
    1010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1014:	dc 01       	movw	r26, r24
    1016:	cb 01       	movw	r24, r22
    1018:	9c 8b       	std	Y+20, r25	; 0x14
    101a:	8b 8b       	std	Y+19, r24	; 0x13
    101c:	8b 89       	ldd	r24, Y+19	; 0x13
    101e:	9c 89       	ldd	r25, Y+20	; 0x14
    1020:	98 8b       	std	Y+16, r25	; 0x10
    1022:	8f 87       	std	Y+15, r24	; 0x0f
    1024:	8f 85       	ldd	r24, Y+15	; 0x0f
    1026:	98 89       	ldd	r25, Y+16	; 0x10
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	f1 f7       	brne	.-4      	; 0x1028 <HIMI_setNewPass+0x10a>
    102c:	98 8b       	std	Y+16, r25	; 0x10
    102e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(WLCOME_WAIT_TIME);

		LCD_clearScreen();
    1030:	0e 94 99 14 	call	0x2932	; 0x2932 <LCD_clearScreen>
		LCD_displayString("Enter New Pass: ");
    1034:	8a e9       	ldi	r24, 0x9A	; 154
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <LCD_displayString>
		LCD_moveCursor(1, 0);
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	60 e0       	ldi	r22, 0x00	; 0
    1040:	0e 94 1b 14 	call	0x2836	; 0x2836 <LCD_moveCursor>
		HIMI_getPass(g_Password);
    1044:	8a e6       	ldi	r24, 0x6A	; 106
    1046:	91 e0       	ldi	r25, 0x01	; 1
    1048:	0e 94 84 09 	call	0x1308	; 0x1308 <HIMI_getPass>

		HIMI_sendCommand(READY_SEND_FIRST_PASS);
    104c:	83 ef       	ldi	r24, 0xF3	; 243
    104e:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <HIMI_sendCommand>
		HIMI_sendPassword(g_Password);
    1052:	8a e6       	ldi	r24, 0x6A	; 106
    1054:	91 e0       	ldi	r25, 0x01	; 1
    1056:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <HIMI_sendPassword>


		LCD_clearScreen();
    105a:	0e 94 99 14 	call	0x2932	; 0x2932 <LCD_clearScreen>
		LCD_displayString("re-Enter Pass: ");
    105e:	8b ea       	ldi	r24, 0xAB	; 171
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <LCD_displayString>
		LCD_moveCursor(1, 0);
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	60 e0       	ldi	r22, 0x00	; 0
    106a:	0e 94 1b 14 	call	0x2836	; 0x2836 <LCD_moveCursor>
		HIMI_getPass(g_Password);
    106e:	8a e6       	ldi	r24, 0x6A	; 106
    1070:	91 e0       	ldi	r25, 0x01	; 1
    1072:	0e 94 84 09 	call	0x1308	; 0x1308 <HIMI_getPass>

		HIMI_sendCommand(READY_SEND_SECOND_PASS);
    1076:	84 ef       	ldi	r24, 0xF4	; 244
    1078:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <HIMI_sendCommand>
		HIMI_sendPassword(g_Password);
    107c:	8a e6       	ldi	r24, 0x6A	; 106
    107e:	91 e0       	ldi	r25, 0x01	; 1
    1080:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <HIMI_sendPassword>

		g_passStatus = HIMI_commandRecieve();
    1084:	0e 94 78 07 	call	0xef0	; 0xef0 <HIMI_commandRecieve>
    1088:	80 93 74 01 	sts	0x0174, r24

		/* In case the Two Passwords did not match */
		if (g_passStatus == PASS_MIS_MATCHED)
    108c:	80 91 74 01 	lds	r24, 0x0174
    1090:	88 23       	and	r24, r24
    1092:	09 f0       	breq	.+2      	; 0x1096 <HIMI_setNewPass+0x178>
    1094:	78 c0       	rjmp	.+240    	; 0x1186 <HIMI_setNewPass+0x268>
		{
			LCD_clearScreen();
    1096:	0e 94 99 14 	call	0x2932	; 0x2932 <LCD_clearScreen>
			LCD_displayString("MISMATCHED Pass");
    109a:	8b eb       	ldi	r24, 0xBB	; 187
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <LCD_displayString>
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	90 e8       	ldi	r25, 0x80	; 128
    10a6:	ab eb       	ldi	r26, 0xBB	; 187
    10a8:	b4 e4       	ldi	r27, 0x44	; 68
    10aa:	8b 87       	std	Y+11, r24	; 0x0b
    10ac:	9c 87       	std	Y+12, r25	; 0x0c
    10ae:	ad 87       	std	Y+13, r26	; 0x0d
    10b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    10b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    10b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ba:	20 e0       	ldi	r18, 0x00	; 0
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	4a ef       	ldi	r20, 0xFA	; 250
    10c0:	54 e4       	ldi	r21, 0x44	; 68
    10c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10c6:	dc 01       	movw	r26, r24
    10c8:	cb 01       	movw	r24, r22
    10ca:	8f 83       	std	Y+7, r24	; 0x07
    10cc:	98 87       	std	Y+8, r25	; 0x08
    10ce:	a9 87       	std	Y+9, r26	; 0x09
    10d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10d2:	6f 81       	ldd	r22, Y+7	; 0x07
    10d4:	78 85       	ldd	r23, Y+8	; 0x08
    10d6:	89 85       	ldd	r24, Y+9	; 0x09
    10d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	40 e8       	ldi	r20, 0x80	; 128
    10e0:	5f e3       	ldi	r21, 0x3F	; 63
    10e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10e6:	88 23       	and	r24, r24
    10e8:	2c f4       	brge	.+10     	; 0x10f4 <HIMI_setNewPass+0x1d6>
		__ticks = 1;
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	9e 83       	std	Y+6, r25	; 0x06
    10f0:	8d 83       	std	Y+5, r24	; 0x05
    10f2:	3f c0       	rjmp	.+126    	; 0x1172 <HIMI_setNewPass+0x254>
	else if (__tmp > 65535)
    10f4:	6f 81       	ldd	r22, Y+7	; 0x07
    10f6:	78 85       	ldd	r23, Y+8	; 0x08
    10f8:	89 85       	ldd	r24, Y+9	; 0x09
    10fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	3f ef       	ldi	r19, 0xFF	; 255
    1100:	4f e7       	ldi	r20, 0x7F	; 127
    1102:	57 e4       	ldi	r21, 0x47	; 71
    1104:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1108:	18 16       	cp	r1, r24
    110a:	4c f5       	brge	.+82     	; 0x115e <HIMI_setNewPass+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    110c:	6b 85       	ldd	r22, Y+11	; 0x0b
    110e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1110:	8d 85       	ldd	r24, Y+13	; 0x0d
    1112:	9e 85       	ldd	r25, Y+14	; 0x0e
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	40 e2       	ldi	r20, 0x20	; 32
    111a:	51 e4       	ldi	r21, 0x41	; 65
    111c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	bc 01       	movw	r22, r24
    1126:	cd 01       	movw	r24, r26
    1128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	9e 83       	std	Y+6, r25	; 0x06
    1132:	8d 83       	std	Y+5, r24	; 0x05
    1134:	0f c0       	rjmp	.+30     	; 0x1154 <HIMI_setNewPass+0x236>
    1136:	88 ec       	ldi	r24, 0xC8	; 200
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	9c 83       	std	Y+4, r25	; 0x04
    113c:	8b 83       	std	Y+3, r24	; 0x03
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	9c 81       	ldd	r25, Y+4	; 0x04
    1142:	01 97       	sbiw	r24, 0x01	; 1
    1144:	f1 f7       	brne	.-4      	; 0x1142 <HIMI_setNewPass+0x224>
    1146:	9c 83       	std	Y+4, r25	; 0x04
    1148:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    114a:	8d 81       	ldd	r24, Y+5	; 0x05
    114c:	9e 81       	ldd	r25, Y+6	; 0x06
    114e:	01 97       	sbiw	r24, 0x01	; 1
    1150:	9e 83       	std	Y+6, r25	; 0x06
    1152:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1154:	8d 81       	ldd	r24, Y+5	; 0x05
    1156:	9e 81       	ldd	r25, Y+6	; 0x06
    1158:	00 97       	sbiw	r24, 0x00	; 0
    115a:	69 f7       	brne	.-38     	; 0x1136 <HIMI_setNewPass+0x218>
    115c:	14 c0       	rjmp	.+40     	; 0x1186 <HIMI_setNewPass+0x268>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    115e:	6f 81       	ldd	r22, Y+7	; 0x07
    1160:	78 85       	ldd	r23, Y+8	; 0x08
    1162:	89 85       	ldd	r24, Y+9	; 0x09
    1164:	9a 85       	ldd	r25, Y+10	; 0x0a
    1166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    116a:	dc 01       	movw	r26, r24
    116c:	cb 01       	movw	r24, r22
    116e:	9e 83       	std	Y+6, r25	; 0x06
    1170:	8d 83       	std	Y+5, r24	; 0x05
    1172:	8d 81       	ldd	r24, Y+5	; 0x05
    1174:	9e 81       	ldd	r25, Y+6	; 0x06
    1176:	9a 83       	std	Y+2, r25	; 0x02
    1178:	89 83       	std	Y+1, r24	; 0x01
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	9a 81       	ldd	r25, Y+2	; 0x02
    117e:	01 97       	sbiw	r24, 0x01	; 1
    1180:	f1 f7       	brne	.-4      	; 0x117e <HIMI_setNewPass+0x260>
    1182:	9a 83       	std	Y+2, r25	; 0x02
    1184:	89 83       	std	Y+1, r24	; 0x01

void HIMI_setNewPass()
{
	g_passStatus = PASS_MIS_MATCHED;

	while(g_passStatus == PASS_MIS_MATCHED)
    1186:	80 91 74 01 	lds	r24, 0x0174
    118a:	88 23       	and	r24, r24
    118c:	09 f4       	brne	.+2      	; 0x1190 <HIMI_setNewPass+0x272>
    118e:	d4 ce       	rjmp	.-600    	; 0xf38 <HIMI_setNewPass+0x1a>
			LCD_clearScreen();
			LCD_displayString("MISMATCHED Pass");
			_delay_ms(WLCOME_WAIT_TIME);
		}
	}
}
    1190:	6c 96       	adiw	r28, 0x1c	; 28
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	f8 94       	cli
    1196:	de bf       	out	0x3e, r29	; 62
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	cd bf       	out	0x3d, r28	; 61
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <HIMI_sendCommand>:

void HIMI_sendCommand(uint8 g_command)
{
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	0f 92       	push	r0
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(READY_SEND); //Check mcu2 if ready to receive
    11ae:	80 ef       	ldi	r24, 0xF0	; 240
    11b0:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <UART_sendByte>

	while(UART_recieveByte() != READY_RECIEVE); //exit when Ready to receive
    11b4:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <UART_recieveByte>
    11b8:	81 3f       	cpi	r24, 0xF1	; 241
    11ba:	e1 f7       	brne	.-8      	; 0x11b4 <HIMI_sendCommand+0x12>

	UART_sendByte(g_command); //Send the command
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <UART_sendByte>

	while(UART_recieveByte() != RECIEVE_DONE); //polling until all is received
    11c2:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <UART_recieveByte>
    11c6:	82 3f       	cpi	r24, 0xF2	; 242
    11c8:	e1 f7       	brne	.-8      	; 0x11c2 <HIMI_sendCommand+0x20>
}
    11ca:	0f 90       	pop	r0
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	08 95       	ret

000011d2 <HIMI_sendPassword>:


void HIMI_sendPassword (uint8 a_Password[])
{
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    11da:	61 97       	sbiw	r28, 0x11	; 17
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	f8 94       	cli
    11e0:	de bf       	out	0x3e, r29	; 62
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	cd bf       	out	0x3d, r28	; 61
    11e6:	99 8b       	std	Y+17, r25	; 0x11
    11e8:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;

	for(i=0 ; i<PASSWORD_LENGTH ; i++)
    11ea:	1f 86       	std	Y+15, r1	; 0x0f
    11ec:	80 c0       	rjmp	.+256    	; 0x12ee <HIMI_sendPassword+0x11c>
	{
		UART_sendByte( a_Password [ i ] );
    11ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	88 89       	ldd	r24, Y+16	; 0x10
    11f6:	99 89       	ldd	r25, Y+17	; 0x11
    11f8:	fc 01       	movw	r30, r24
    11fa:	e2 0f       	add	r30, r18
    11fc:	f3 1f       	adc	r31, r19
    11fe:	80 81       	ld	r24, Z
    1200:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <UART_sendByte>
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	a0 e2       	ldi	r26, 0x20	; 32
    120a:	b1 e4       	ldi	r27, 0x41	; 65
    120c:	8b 87       	std	Y+11, r24	; 0x0b
    120e:	9c 87       	std	Y+12, r25	; 0x0c
    1210:	ad 87       	std	Y+13, r26	; 0x0d
    1212:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1214:	6b 85       	ldd	r22, Y+11	; 0x0b
    1216:	7c 85       	ldd	r23, Y+12	; 0x0c
    1218:	8d 85       	ldd	r24, Y+13	; 0x0d
    121a:	9e 85       	ldd	r25, Y+14	; 0x0e
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	4a ef       	ldi	r20, 0xFA	; 250
    1222:	54 e4       	ldi	r21, 0x44	; 68
    1224:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1228:	dc 01       	movw	r26, r24
    122a:	cb 01       	movw	r24, r22
    122c:	8f 83       	std	Y+7, r24	; 0x07
    122e:	98 87       	std	Y+8, r25	; 0x08
    1230:	a9 87       	std	Y+9, r26	; 0x09
    1232:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1234:	6f 81       	ldd	r22, Y+7	; 0x07
    1236:	78 85       	ldd	r23, Y+8	; 0x08
    1238:	89 85       	ldd	r24, Y+9	; 0x09
    123a:	9a 85       	ldd	r25, Y+10	; 0x0a
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	40 e8       	ldi	r20, 0x80	; 128
    1242:	5f e3       	ldi	r21, 0x3F	; 63
    1244:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1248:	88 23       	and	r24, r24
    124a:	2c f4       	brge	.+10     	; 0x1256 <HIMI_sendPassword+0x84>
		__ticks = 1;
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	9e 83       	std	Y+6, r25	; 0x06
    1252:	8d 83       	std	Y+5, r24	; 0x05
    1254:	3f c0       	rjmp	.+126    	; 0x12d4 <HIMI_sendPassword+0x102>
	else if (__tmp > 65535)
    1256:	6f 81       	ldd	r22, Y+7	; 0x07
    1258:	78 85       	ldd	r23, Y+8	; 0x08
    125a:	89 85       	ldd	r24, Y+9	; 0x09
    125c:	9a 85       	ldd	r25, Y+10	; 0x0a
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	3f ef       	ldi	r19, 0xFF	; 255
    1262:	4f e7       	ldi	r20, 0x7F	; 127
    1264:	57 e4       	ldi	r21, 0x47	; 71
    1266:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    126a:	18 16       	cp	r1, r24
    126c:	4c f5       	brge	.+82     	; 0x12c0 <HIMI_sendPassword+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    126e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1270:	7c 85       	ldd	r23, Y+12	; 0x0c
    1272:	8d 85       	ldd	r24, Y+13	; 0x0d
    1274:	9e 85       	ldd	r25, Y+14	; 0x0e
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	40 e2       	ldi	r20, 0x20	; 32
    127c:	51 e4       	ldi	r21, 0x41	; 65
    127e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1282:	dc 01       	movw	r26, r24
    1284:	cb 01       	movw	r24, r22
    1286:	bc 01       	movw	r22, r24
    1288:	cd 01       	movw	r24, r26
    128a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	9e 83       	std	Y+6, r25	; 0x06
    1294:	8d 83       	std	Y+5, r24	; 0x05
    1296:	0f c0       	rjmp	.+30     	; 0x12b6 <HIMI_sendPassword+0xe4>
    1298:	88 ec       	ldi	r24, 0xC8	; 200
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	9c 83       	std	Y+4, r25	; 0x04
    129e:	8b 83       	std	Y+3, r24	; 0x03
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	9c 81       	ldd	r25, Y+4	; 0x04
    12a4:	01 97       	sbiw	r24, 0x01	; 1
    12a6:	f1 f7       	brne	.-4      	; 0x12a4 <HIMI_sendPassword+0xd2>
    12a8:	9c 83       	std	Y+4, r25	; 0x04
    12aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ac:	8d 81       	ldd	r24, Y+5	; 0x05
    12ae:	9e 81       	ldd	r25, Y+6	; 0x06
    12b0:	01 97       	sbiw	r24, 0x01	; 1
    12b2:	9e 83       	std	Y+6, r25	; 0x06
    12b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12b6:	8d 81       	ldd	r24, Y+5	; 0x05
    12b8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ba:	00 97       	sbiw	r24, 0x00	; 0
    12bc:	69 f7       	brne	.-38     	; 0x1298 <HIMI_sendPassword+0xc6>
    12be:	14 c0       	rjmp	.+40     	; 0x12e8 <HIMI_sendPassword+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12c0:	6f 81       	ldd	r22, Y+7	; 0x07
    12c2:	78 85       	ldd	r23, Y+8	; 0x08
    12c4:	89 85       	ldd	r24, Y+9	; 0x09
    12c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12cc:	dc 01       	movw	r26, r24
    12ce:	cb 01       	movw	r24, r22
    12d0:	9e 83       	std	Y+6, r25	; 0x06
    12d2:	8d 83       	std	Y+5, r24	; 0x05
    12d4:	8d 81       	ldd	r24, Y+5	; 0x05
    12d6:	9e 81       	ldd	r25, Y+6	; 0x06
    12d8:	9a 83       	std	Y+2, r25	; 0x02
    12da:	89 83       	std	Y+1, r24	; 0x01
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	9a 81       	ldd	r25, Y+2	; 0x02
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	f1 f7       	brne	.-4      	; 0x12e0 <HIMI_sendPassword+0x10e>
    12e4:	9a 83       	std	Y+2, r25	; 0x02
    12e6:	89 83       	std	Y+1, r24	; 0x01

void HIMI_sendPassword (uint8 a_Password[])
{
	uint8 i;

	for(i=0 ; i<PASSWORD_LENGTH ; i++)
    12e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    12ea:	8f 5f       	subi	r24, 0xFF	; 255
    12ec:	8f 87       	std	Y+15, r24	; 0x0f
    12ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    12f0:	85 30       	cpi	r24, 0x05	; 5
    12f2:	08 f4       	brcc	.+2      	; 0x12f6 <HIMI_sendPassword+0x124>
    12f4:	7c cf       	rjmp	.-264    	; 0x11ee <HIMI_sendPassword+0x1c>
	{
		UART_sendByte( a_Password [ i ] );
		_delay_ms(SEND_RECEIVE_TIME);
	}

}
    12f6:	61 96       	adiw	r28, 0x11	; 17
    12f8:	0f b6       	in	r0, 0x3f	; 63
    12fa:	f8 94       	cli
    12fc:	de bf       	out	0x3e, r29	; 62
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	cd bf       	out	0x3d, r28	; 61
    1302:	cf 91       	pop	r28
    1304:	df 91       	pop	r29
    1306:	08 95       	ret

00001308 <HIMI_getPass>:



void HIMI_getPass(uint8 a_Password[])
{
    1308:	df 93       	push	r29
    130a:	cf 93       	push	r28
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
    1310:	61 97       	sbiw	r28, 0x11	; 17
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	f8 94       	cli
    1316:	de bf       	out	0x3e, r29	; 62
    1318:	0f be       	out	0x3f, r0	; 63
    131a:	cd bf       	out	0x3d, r28	; 61
    131c:	99 8b       	std	Y+17, r25	; 0x11
    131e:	88 8b       	std	Y+16, r24	; 0x10
	LCD_moveCursor(1, 0);
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	60 e0       	ldi	r22, 0x00	; 0
    1324:	0e 94 1b 14 	call	0x2836	; 0x2836 <LCD_moveCursor>

	uint8 counter=0;
    1328:	1f 86       	std	Y+15, r1	; 0x0f
    132a:	8b c0       	rjmp	.+278    	; 0x1442 <HIMI_getPass+0x13a>

	while(counter != PASSWORD_LENGTH)
	{
		g_getPressedKey = KEYPAD_getPressedKey();
    132c:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <KEYPAD_getPressedKey>
    1330:	80 93 73 01 	sts	0x0173, r24

		if(g_getPressedKey >=0 && g_getPressedKey <=9)
    1334:	80 91 73 01 	lds	r24, 0x0173
    1338:	8a 30       	cpi	r24, 0x0A	; 10
    133a:	88 f4       	brcc	.+34     	; 0x135e <HIMI_getPass+0x56>
		{
			a_Password[counter] = g_getPressedKey;
    133c:	8f 85       	ldd	r24, Y+15	; 0x0f
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	88 89       	ldd	r24, Y+16	; 0x10
    1344:	99 89       	ldd	r25, Y+17	; 0x11
    1346:	fc 01       	movw	r30, r24
    1348:	e2 0f       	add	r30, r18
    134a:	f3 1f       	adc	r31, r19
    134c:	80 91 73 01 	lds	r24, 0x0173
    1350:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
    1352:	8a e2       	ldi	r24, 0x2A	; 42
    1354:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_displayCharacter>
			counter++;
    1358:	8f 85       	ldd	r24, Y+15	; 0x0f
    135a:	8f 5f       	subi	r24, 0xFF	; 255
    135c:	8f 87       	std	Y+15, r24	; 0x0f
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	aa ef       	ldi	r26, 0xFA	; 250
    1364:	b3 e4       	ldi	r27, 0x43	; 67
    1366:	8b 87       	std	Y+11, r24	; 0x0b
    1368:	9c 87       	std	Y+12, r25	; 0x0c
    136a:	ad 87       	std	Y+13, r26	; 0x0d
    136c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    136e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1370:	7c 85       	ldd	r23, Y+12	; 0x0c
    1372:	8d 85       	ldd	r24, Y+13	; 0x0d
    1374:	9e 85       	ldd	r25, Y+14	; 0x0e
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	4a ef       	ldi	r20, 0xFA	; 250
    137c:	54 e4       	ldi	r21, 0x44	; 68
    137e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	8f 83       	std	Y+7, r24	; 0x07
    1388:	98 87       	std	Y+8, r25	; 0x08
    138a:	a9 87       	std	Y+9, r26	; 0x09
    138c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    138e:	6f 81       	ldd	r22, Y+7	; 0x07
    1390:	78 85       	ldd	r23, Y+8	; 0x08
    1392:	89 85       	ldd	r24, Y+9	; 0x09
    1394:	9a 85       	ldd	r25, Y+10	; 0x0a
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	40 e8       	ldi	r20, 0x80	; 128
    139c:	5f e3       	ldi	r21, 0x3F	; 63
    139e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13a2:	88 23       	and	r24, r24
    13a4:	2c f4       	brge	.+10     	; 0x13b0 <HIMI_getPass+0xa8>
		__ticks = 1;
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	9e 83       	std	Y+6, r25	; 0x06
    13ac:	8d 83       	std	Y+5, r24	; 0x05
    13ae:	3f c0       	rjmp	.+126    	; 0x142e <HIMI_getPass+0x126>
	else if (__tmp > 65535)
    13b0:	6f 81       	ldd	r22, Y+7	; 0x07
    13b2:	78 85       	ldd	r23, Y+8	; 0x08
    13b4:	89 85       	ldd	r24, Y+9	; 0x09
    13b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	3f ef       	ldi	r19, 0xFF	; 255
    13bc:	4f e7       	ldi	r20, 0x7F	; 127
    13be:	57 e4       	ldi	r21, 0x47	; 71
    13c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13c4:	18 16       	cp	r1, r24
    13c6:	4c f5       	brge	.+82     	; 0x141a <HIMI_getPass+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    13cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	40 e2       	ldi	r20, 0x20	; 32
    13d6:	51 e4       	ldi	r21, 0x41	; 65
    13d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	bc 01       	movw	r22, r24
    13e2:	cd 01       	movw	r24, r26
    13e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e8:	dc 01       	movw	r26, r24
    13ea:	cb 01       	movw	r24, r22
    13ec:	9e 83       	std	Y+6, r25	; 0x06
    13ee:	8d 83       	std	Y+5, r24	; 0x05
    13f0:	0f c0       	rjmp	.+30     	; 0x1410 <HIMI_getPass+0x108>
    13f2:	88 ec       	ldi	r24, 0xC8	; 200
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	9c 83       	std	Y+4, r25	; 0x04
    13f8:	8b 83       	std	Y+3, r24	; 0x03
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	9c 81       	ldd	r25, Y+4	; 0x04
    13fe:	01 97       	sbiw	r24, 0x01	; 1
    1400:	f1 f7       	brne	.-4      	; 0x13fe <HIMI_getPass+0xf6>
    1402:	9c 83       	std	Y+4, r25	; 0x04
    1404:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1406:	8d 81       	ldd	r24, Y+5	; 0x05
    1408:	9e 81       	ldd	r25, Y+6	; 0x06
    140a:	01 97       	sbiw	r24, 0x01	; 1
    140c:	9e 83       	std	Y+6, r25	; 0x06
    140e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1410:	8d 81       	ldd	r24, Y+5	; 0x05
    1412:	9e 81       	ldd	r25, Y+6	; 0x06
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	69 f7       	brne	.-38     	; 0x13f2 <HIMI_getPass+0xea>
    1418:	14 c0       	rjmp	.+40     	; 0x1442 <HIMI_getPass+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    141a:	6f 81       	ldd	r22, Y+7	; 0x07
    141c:	78 85       	ldd	r23, Y+8	; 0x08
    141e:	89 85       	ldd	r24, Y+9	; 0x09
    1420:	9a 85       	ldd	r25, Y+10	; 0x0a
    1422:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1426:	dc 01       	movw	r26, r24
    1428:	cb 01       	movw	r24, r22
    142a:	9e 83       	std	Y+6, r25	; 0x06
    142c:	8d 83       	std	Y+5, r24	; 0x05
    142e:	8d 81       	ldd	r24, Y+5	; 0x05
    1430:	9e 81       	ldd	r25, Y+6	; 0x06
    1432:	9a 83       	std	Y+2, r25	; 0x02
    1434:	89 83       	std	Y+1, r24	; 0x01
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	9a 81       	ldd	r25, Y+2	; 0x02
    143a:	01 97       	sbiw	r24, 0x01	; 1
    143c:	f1 f7       	brne	.-4      	; 0x143a <HIMI_getPass+0x132>
    143e:	9a 83       	std	Y+2, r25	; 0x02
    1440:	89 83       	std	Y+1, r24	; 0x01
{
	LCD_moveCursor(1, 0);

	uint8 counter=0;

	while(counter != PASSWORD_LENGTH)
    1442:	8f 85       	ldd	r24, Y+15	; 0x0f
    1444:	85 30       	cpi	r24, 0x05	; 5
    1446:	09 f0       	breq	.+2      	; 0x144a <HIMI_getPass+0x142>
    1448:	71 cf       	rjmp	.-286    	; 0x132c <HIMI_getPass+0x24>
			counter++;
		}
		_delay_ms(KEY_PRESS); //delay for press key
	}

	while ( KEYPAD_getPressedKey() != '=' ); //Don't exit this function until i press '='
    144a:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <KEYPAD_getPressedKey>
    144e:	8d 33       	cpi	r24, 0x3D	; 61
    1450:	e1 f7       	brne	.-8      	; 0x144a <HIMI_getPass+0x142>
}
    1452:	61 96       	adiw	r28, 0x11	; 17
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	f8 94       	cli
    1458:	de bf       	out	0x3e, r29	; 62
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	cd bf       	out	0x3d, r28	; 61
    145e:	cf 91       	pop	r28
    1460:	df 91       	pop	r29
    1462:	08 95       	ret

00001464 <HIMI_mainOptions>:

void HIMI_mainOptions(void)
{
    1464:	df 93       	push	r29
    1466:	cf 93       	push	r28
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen(); /* Clear Screen */
    146c:	0e 94 99 14 	call	0x2932	; 0x2932 <LCD_clearScreen>
	LCD_displayString("+ : Open Door"); /* Display the first option */
    1470:	8b ec       	ldi	r24, 0xCB	; 203
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <LCD_displayString>
	LCD_moveCursor(1,0); /* Move to the next line */
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	60 e0       	ldi	r22, 0x00	; 0
    147c:	0e 94 1b 14 	call	0x2836	; 0x2836 <LCD_moveCursor>
	LCD_displayString("- : Change Pass"); /* Display the second option */
    1480:	89 ed       	ldi	r24, 0xD9	; 217
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <LCD_displayString>
}
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret

0000148e <HIMI_enterPass>:

void HIMI_enterPass(void)
{
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1496:	0e 94 99 14 	call	0x2932	; 0x2932 <LCD_clearScreen>
	LCD_displayString("Enter Password: ");
    149a:	89 ee       	ldi	r24, 0xE9	; 233
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <LCD_displayString>
	HIMI_getPass(g_Password);
    14a2:	8a e6       	ldi	r24, 0x6A	; 106
    14a4:	91 e0       	ldi	r25, 0x01	; 1
    14a6:	0e 94 84 09 	call	0x1308	; 0x1308 <HIMI_getPass>

}
    14aa:	cf 91       	pop	r28
    14ac:	df 91       	pop	r29
    14ae:	08 95       	ret

000014b0 <HIMI_openDoor>:

void HIMI_openDoor(void)
{
    14b0:	df 93       	push	r29
    14b2:	cf 93       	push	r28
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
	HIMI_startTimer();
    14b8:	0e 94 3d 07 	call	0xe7a	; 0xe7a <HIMI_startTimer>

	/* OPEN the door for ( 15 sec ) */
	LCD_clearScreen();
    14bc:	0e 94 99 14 	call	0x2932	; 0x2932 <LCD_clearScreen>
	LCD_displayString("Door is Opening");
    14c0:	8a ef       	ldi	r24, 0xFA	; 250
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <LCD_displayString>
	while(g_tick < OPEN_ClOSE_DOOR_TIME); /* Count up to 10 */
    14c8:	80 91 70 01 	lds	r24, 0x0170
    14cc:	8a 30       	cpi	r24, 0x0A	; 10
    14ce:	e0 f3       	brcs	.-8      	; 0x14c8 <HIMI_openDoor+0x18>
	g_tick = 0;
    14d0:	10 92 70 01 	sts	0x0170, r1

	/* HOLD the door for ( 3 sec ) */
	LCD_clearScreen();
    14d4:	0e 94 99 14 	call	0x2932	; 0x2932 <LCD_clearScreen>
	LCD_displayString("DOOR HOLD");
    14d8:	8a e0       	ldi	r24, 0x0A	; 10
    14da:	91 e0       	ldi	r25, 0x01	; 1
    14dc:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <LCD_displayString>
	LCD_displayStringRowColumn(1, 0, "plz ENTER");
    14e0:	24 e1       	ldi	r18, 0x14	; 20
    14e2:	31 e0       	ldi	r19, 0x01	; 1
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	60 e0       	ldi	r22, 0x00	; 0
    14e8:	a9 01       	movw	r20, r18
    14ea:	0e 94 5d 14 	call	0x28ba	; 0x28ba <LCD_displayStringRowColumn>
	while(g_tick < HOLD_DOOR_TIME); /* Count up to 3 */
    14ee:	80 91 70 01 	lds	r24, 0x0170
    14f2:	83 30       	cpi	r24, 0x03	; 3
    14f4:	e0 f3       	brcs	.-8      	; 0x14ee <HIMI_openDoor+0x3e>
	g_tick = 0;
    14f6:	10 92 70 01 	sts	0x0170, r1

	/* CLOSE the door for ( 10 sec ) */
	LCD_clearScreen();
    14fa:	0e 94 99 14 	call	0x2932	; 0x2932 <LCD_clearScreen>
	LCD_displayString("Door is Closing");
    14fe:	8e e1       	ldi	r24, 0x1E	; 30
    1500:	91 e0       	ldi	r25, 0x01	; 1
    1502:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <LCD_displayString>
	while(g_tick < OPEN_ClOSE_DOOR_TIME); /* Count up to 10 */
    1506:	80 91 70 01 	lds	r24, 0x0170
    150a:	8a 30       	cpi	r24, 0x0A	; 10
    150c:	e0 f3       	brcs	.-8      	; 0x1506 <HIMI_openDoor+0x56>
	g_tick = 0;
    150e:	10 92 70 01 	sts	0x0170, r1

	Timer1_deInit();
    1512:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <Timer1_deInit>
	LCD_clearScreen();
    1516:	0e 94 99 14 	call	0x2932	; 0x2932 <LCD_clearScreen>

}
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	08 95       	ret

00001520 <HIMI_wrongPass>:

void HIMI_wrongPass(void)
{
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	2e 97       	sbiw	r28, 0x0e	; 14
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	f8 94       	cli
    152e:	de bf       	out	0x3e, r29	; 62
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	cd bf       	out	0x3d, r28	; 61
	g_passwordMistakes++;
    1534:	80 91 6f 01 	lds	r24, 0x016F
    1538:	8f 5f       	subi	r24, 0xFF	; 255
    153a:	80 93 6f 01 	sts	0x016F, r24

	LCD_clearScreen();
    153e:	0e 94 99 14 	call	0x2932	; 0x2932 <LCD_clearScreen>
	LCD_displayString("* WRONG PASS *");
    1542:	8e e2       	ldi	r24, 0x2E	; 46
    1544:	91 e0       	ldi	r25, 0x01	; 1
    1546:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <LCD_displayString>
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	90 e8       	ldi	r25, 0x80	; 128
    154e:	ab eb       	ldi	r26, 0xBB	; 187
    1550:	b4 e4       	ldi	r27, 0x44	; 68
    1552:	8b 87       	std	Y+11, r24	; 0x0b
    1554:	9c 87       	std	Y+12, r25	; 0x0c
    1556:	ad 87       	std	Y+13, r26	; 0x0d
    1558:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    155a:	6b 85       	ldd	r22, Y+11	; 0x0b
    155c:	7c 85       	ldd	r23, Y+12	; 0x0c
    155e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1560:	9e 85       	ldd	r25, Y+14	; 0x0e
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	4a ef       	ldi	r20, 0xFA	; 250
    1568:	54 e4       	ldi	r21, 0x44	; 68
    156a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	8f 83       	std	Y+7, r24	; 0x07
    1574:	98 87       	std	Y+8, r25	; 0x08
    1576:	a9 87       	std	Y+9, r26	; 0x09
    1578:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    157a:	6f 81       	ldd	r22, Y+7	; 0x07
    157c:	78 85       	ldd	r23, Y+8	; 0x08
    157e:	89 85       	ldd	r24, Y+9	; 0x09
    1580:	9a 85       	ldd	r25, Y+10	; 0x0a
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	40 e8       	ldi	r20, 0x80	; 128
    1588:	5f e3       	ldi	r21, 0x3F	; 63
    158a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    158e:	88 23       	and	r24, r24
    1590:	2c f4       	brge	.+10     	; 0x159c <HIMI_wrongPass+0x7c>
		__ticks = 1;
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	9e 83       	std	Y+6, r25	; 0x06
    1598:	8d 83       	std	Y+5, r24	; 0x05
    159a:	3f c0       	rjmp	.+126    	; 0x161a <HIMI_wrongPass+0xfa>
	else if (__tmp > 65535)
    159c:	6f 81       	ldd	r22, Y+7	; 0x07
    159e:	78 85       	ldd	r23, Y+8	; 0x08
    15a0:	89 85       	ldd	r24, Y+9	; 0x09
    15a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	3f ef       	ldi	r19, 0xFF	; 255
    15a8:	4f e7       	ldi	r20, 0x7F	; 127
    15aa:	57 e4       	ldi	r21, 0x47	; 71
    15ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15b0:	18 16       	cp	r1, r24
    15b2:	4c f5       	brge	.+82     	; 0x1606 <HIMI_wrongPass+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	40 e2       	ldi	r20, 0x20	; 32
    15c2:	51 e4       	ldi	r21, 0x41	; 65
    15c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	bc 01       	movw	r22, r24
    15ce:	cd 01       	movw	r24, r26
    15d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	9e 83       	std	Y+6, r25	; 0x06
    15da:	8d 83       	std	Y+5, r24	; 0x05
    15dc:	0f c0       	rjmp	.+30     	; 0x15fc <HIMI_wrongPass+0xdc>
    15de:	88 ec       	ldi	r24, 0xC8	; 200
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	9c 83       	std	Y+4, r25	; 0x04
    15e4:	8b 83       	std	Y+3, r24	; 0x03
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	f1 f7       	brne	.-4      	; 0x15ea <HIMI_wrongPass+0xca>
    15ee:	9c 83       	std	Y+4, r25	; 0x04
    15f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f2:	8d 81       	ldd	r24, Y+5	; 0x05
    15f4:	9e 81       	ldd	r25, Y+6	; 0x06
    15f6:	01 97       	sbiw	r24, 0x01	; 1
    15f8:	9e 83       	std	Y+6, r25	; 0x06
    15fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15fc:	8d 81       	ldd	r24, Y+5	; 0x05
    15fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1600:	00 97       	sbiw	r24, 0x00	; 0
    1602:	69 f7       	brne	.-38     	; 0x15de <HIMI_wrongPass+0xbe>
    1604:	14 c0       	rjmp	.+40     	; 0x162e <HIMI_wrongPass+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1606:	6f 81       	ldd	r22, Y+7	; 0x07
    1608:	78 85       	ldd	r23, Y+8	; 0x08
    160a:	89 85       	ldd	r24, Y+9	; 0x09
    160c:	9a 85       	ldd	r25, Y+10	; 0x0a
    160e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	9e 83       	std	Y+6, r25	; 0x06
    1618:	8d 83       	std	Y+5, r24	; 0x05
    161a:	8d 81       	ldd	r24, Y+5	; 0x05
    161c:	9e 81       	ldd	r25, Y+6	; 0x06
    161e:	9a 83       	std	Y+2, r25	; 0x02
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	9a 81       	ldd	r25, Y+2	; 0x02
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	f1 f7       	brne	.-4      	; 0x1626 <HIMI_wrongPass+0x106>
    162a:	9a 83       	std	Y+2, r25	; 0x02
    162c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(WLCOME_WAIT_TIME);

	if(g_passwordMistakes == MAX_NUM_OF_MISTAKES)
    162e:	80 91 6f 01 	lds	r24, 0x016F
    1632:	83 30       	cpi	r24, 0x03	; 3
    1634:	e1 f4       	brne	.+56     	; 0x166e <HIMI_wrongPass+0x14e>
	{
		HIMI_startTimer();
    1636:	0e 94 3d 07 	call	0xe7a	; 0xe7a <HIMI_startTimer>

		LCD_clearScreen();
    163a:	0e 94 99 14 	call	0x2932	; 0x2932 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 3, "ERORR!!!");
    163e:	2d e3       	ldi	r18, 0x3D	; 61
    1640:	31 e0       	ldi	r19, 0x01	; 1
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	63 e0       	ldi	r22, 0x03	; 3
    1646:	a9 01       	movw	r20, r18
    1648:	0e 94 5d 14 	call	0x28ba	; 0x28ba <LCD_displayStringRowColumn>

		LCD_displayStringRowColumn(1, 0, "WRONG 3 TIMES");
    164c:	26 e4       	ldi	r18, 0x46	; 70
    164e:	31 e0       	ldi	r19, 0x01	; 1
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	60 e0       	ldi	r22, 0x00	; 0
    1654:	a9 01       	movw	r20, r18
    1656:	0e 94 5d 14 	call	0x28ba	; 0x28ba <LCD_displayStringRowColumn>

		while(g_tick != ERORR_TIME); //Delay 60 sec
    165a:	80 91 70 01 	lds	r24, 0x0170
    165e:	8c 33       	cpi	r24, 0x3C	; 60
    1660:	e1 f7       	brne	.-8      	; 0x165a <HIMI_wrongPass+0x13a>

		/* Reset the counters */
		g_passwordMistakes = 0;
    1662:	10 92 6f 01 	sts	0x016F, r1
		g_tick = 0;
    1666:	10 92 70 01 	sts	0x0170, r1

		Timer1_deInit(); /* Stop the timer */
    166a:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <Timer1_deInit>
	}

	LCD_clearScreen();
    166e:	0e 94 99 14 	call	0x2932	; 0x2932 <LCD_clearScreen>
}
    1672:	2e 96       	adiw	r28, 0x0e	; 14
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	f8 94       	cli
    1678:	de bf       	out	0x3e, r29	; 62
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	cd bf       	out	0x3d, r28	; 61
    167e:	cf 91       	pop	r28
    1680:	df 91       	pop	r29
    1682:	08 95       	ret

00001684 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1684:	df 93       	push	r29
    1686:	cf 93       	push	r28
    1688:	00 d0       	rcall	.+0      	; 0x168a <GPIO_setupPinDirection+0x6>
    168a:	00 d0       	rcall	.+0      	; 0x168c <GPIO_setupPinDirection+0x8>
    168c:	0f 92       	push	r0
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62
    1692:	89 83       	std	Y+1, r24	; 0x01
    1694:	6a 83       	std	Y+2, r22	; 0x02
    1696:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1698:	8a 81       	ldd	r24, Y+2	; 0x02
    169a:	88 30       	cpi	r24, 0x08	; 8
    169c:	08 f0       	brcs	.+2      	; 0x16a0 <GPIO_setupPinDirection+0x1c>
    169e:	d5 c0       	rjmp	.+426    	; 0x184a <GPIO_setupPinDirection+0x1c6>
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	84 30       	cpi	r24, 0x04	; 4
    16a4:	08 f0       	brcs	.+2      	; 0x16a8 <GPIO_setupPinDirection+0x24>
    16a6:	d1 c0       	rjmp	.+418    	; 0x184a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	28 2f       	mov	r18, r24
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	3d 83       	std	Y+5, r19	; 0x05
    16b0:	2c 83       	std	Y+4, r18	; 0x04
    16b2:	8c 81       	ldd	r24, Y+4	; 0x04
    16b4:	9d 81       	ldd	r25, Y+5	; 0x05
    16b6:	81 30       	cpi	r24, 0x01	; 1
    16b8:	91 05       	cpc	r25, r1
    16ba:	09 f4       	brne	.+2      	; 0x16be <GPIO_setupPinDirection+0x3a>
    16bc:	43 c0       	rjmp	.+134    	; 0x1744 <GPIO_setupPinDirection+0xc0>
    16be:	2c 81       	ldd	r18, Y+4	; 0x04
    16c0:	3d 81       	ldd	r19, Y+5	; 0x05
    16c2:	22 30       	cpi	r18, 0x02	; 2
    16c4:	31 05       	cpc	r19, r1
    16c6:	2c f4       	brge	.+10     	; 0x16d2 <GPIO_setupPinDirection+0x4e>
    16c8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ca:	9d 81       	ldd	r25, Y+5	; 0x05
    16cc:	00 97       	sbiw	r24, 0x00	; 0
    16ce:	71 f0       	breq	.+28     	; 0x16ec <GPIO_setupPinDirection+0x68>
    16d0:	bc c0       	rjmp	.+376    	; 0x184a <GPIO_setupPinDirection+0x1c6>
    16d2:	2c 81       	ldd	r18, Y+4	; 0x04
    16d4:	3d 81       	ldd	r19, Y+5	; 0x05
    16d6:	22 30       	cpi	r18, 0x02	; 2
    16d8:	31 05       	cpc	r19, r1
    16da:	09 f4       	brne	.+2      	; 0x16de <GPIO_setupPinDirection+0x5a>
    16dc:	5f c0       	rjmp	.+190    	; 0x179c <GPIO_setupPinDirection+0x118>
    16de:	8c 81       	ldd	r24, Y+4	; 0x04
    16e0:	9d 81       	ldd	r25, Y+5	; 0x05
    16e2:	83 30       	cpi	r24, 0x03	; 3
    16e4:	91 05       	cpc	r25, r1
    16e6:	09 f4       	brne	.+2      	; 0x16ea <GPIO_setupPinDirection+0x66>
    16e8:	85 c0       	rjmp	.+266    	; 0x17f4 <GPIO_setupPinDirection+0x170>
    16ea:	af c0       	rjmp	.+350    	; 0x184a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	81 30       	cpi	r24, 0x01	; 1
    16f0:	a1 f4       	brne	.+40     	; 0x171a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    16f2:	aa e3       	ldi	r26, 0x3A	; 58
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	ea e3       	ldi	r30, 0x3A	; 58
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	48 2f       	mov	r20, r24
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	28 2f       	mov	r18, r24
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	02 2e       	mov	r0, r18
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <GPIO_setupPinDirection+0x8c>
    170c:	88 0f       	add	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	0a 94       	dec	r0
    1712:	e2 f7       	brpl	.-8      	; 0x170c <GPIO_setupPinDirection+0x88>
    1714:	84 2b       	or	r24, r20
    1716:	8c 93       	st	X, r24
    1718:	98 c0       	rjmp	.+304    	; 0x184a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    171a:	aa e3       	ldi	r26, 0x3A	; 58
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	ea e3       	ldi	r30, 0x3A	; 58
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	48 2f       	mov	r20, r24
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	02 2e       	mov	r0, r18
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <GPIO_setupPinDirection+0xb4>
    1734:	88 0f       	add	r24, r24
    1736:	99 1f       	adc	r25, r25
    1738:	0a 94       	dec	r0
    173a:	e2 f7       	brpl	.-8      	; 0x1734 <GPIO_setupPinDirection+0xb0>
    173c:	80 95       	com	r24
    173e:	84 23       	and	r24, r20
    1740:	8c 93       	st	X, r24
    1742:	83 c0       	rjmp	.+262    	; 0x184a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	81 30       	cpi	r24, 0x01	; 1
    1748:	a1 f4       	brne	.+40     	; 0x1772 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    174a:	a7 e3       	ldi	r26, 0x37	; 55
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	e7 e3       	ldi	r30, 0x37	; 55
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	48 2f       	mov	r20, r24
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	28 2f       	mov	r18, r24
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	02 2e       	mov	r0, r18
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <GPIO_setupPinDirection+0xe4>
    1764:	88 0f       	add	r24, r24
    1766:	99 1f       	adc	r25, r25
    1768:	0a 94       	dec	r0
    176a:	e2 f7       	brpl	.-8      	; 0x1764 <GPIO_setupPinDirection+0xe0>
    176c:	84 2b       	or	r24, r20
    176e:	8c 93       	st	X, r24
    1770:	6c c0       	rjmp	.+216    	; 0x184a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1772:	a7 e3       	ldi	r26, 0x37	; 55
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	e7 e3       	ldi	r30, 0x37	; 55
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	48 2f       	mov	r20, r24
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	28 2f       	mov	r18, r24
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	02 2e       	mov	r0, r18
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <GPIO_setupPinDirection+0x10c>
    178c:	88 0f       	add	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	0a 94       	dec	r0
    1792:	e2 f7       	brpl	.-8      	; 0x178c <GPIO_setupPinDirection+0x108>
    1794:	80 95       	com	r24
    1796:	84 23       	and	r24, r20
    1798:	8c 93       	st	X, r24
    179a:	57 c0       	rjmp	.+174    	; 0x184a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	81 30       	cpi	r24, 0x01	; 1
    17a0:	a1 f4       	brne	.+40     	; 0x17ca <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    17a2:	a4 e3       	ldi	r26, 0x34	; 52
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e4 e3       	ldi	r30, 0x34	; 52
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	48 2f       	mov	r20, r24
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	02 2e       	mov	r0, r18
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <GPIO_setupPinDirection+0x13c>
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	0a 94       	dec	r0
    17c2:	e2 f7       	brpl	.-8      	; 0x17bc <GPIO_setupPinDirection+0x138>
    17c4:	84 2b       	or	r24, r20
    17c6:	8c 93       	st	X, r24
    17c8:	40 c0       	rjmp	.+128    	; 0x184a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    17ca:	a4 e3       	ldi	r26, 0x34	; 52
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e4 e3       	ldi	r30, 0x34	; 52
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	48 2f       	mov	r20, r24
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	02 2e       	mov	r0, r18
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <GPIO_setupPinDirection+0x164>
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	0a 94       	dec	r0
    17ea:	e2 f7       	brpl	.-8      	; 0x17e4 <GPIO_setupPinDirection+0x160>
    17ec:	80 95       	com	r24
    17ee:	84 23       	and	r24, r20
    17f0:	8c 93       	st	X, r24
    17f2:	2b c0       	rjmp	.+86     	; 0x184a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    17f4:	8b 81       	ldd	r24, Y+3	; 0x03
    17f6:	81 30       	cpi	r24, 0x01	; 1
    17f8:	a1 f4       	brne	.+40     	; 0x1822 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    17fa:	a1 e3       	ldi	r26, 0x31	; 49
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e1 e3       	ldi	r30, 0x31	; 49
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	48 2f       	mov	r20, r24
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	02 2e       	mov	r0, r18
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <GPIO_setupPinDirection+0x194>
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	0a 94       	dec	r0
    181a:	e2 f7       	brpl	.-8      	; 0x1814 <GPIO_setupPinDirection+0x190>
    181c:	84 2b       	or	r24, r20
    181e:	8c 93       	st	X, r24
    1820:	14 c0       	rjmp	.+40     	; 0x184a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1822:	a1 e3       	ldi	r26, 0x31	; 49
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e1 e3       	ldi	r30, 0x31	; 49
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	48 2f       	mov	r20, r24
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	02 2e       	mov	r0, r18
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <GPIO_setupPinDirection+0x1bc>
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	0a 94       	dec	r0
    1842:	e2 f7       	brpl	.-8      	; 0x183c <GPIO_setupPinDirection+0x1b8>
    1844:	80 95       	com	r24
    1846:	84 23       	and	r24, r20
    1848:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	cf 91       	pop	r28
    1856:	df 91       	pop	r29
    1858:	08 95       	ret

0000185a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	00 d0       	rcall	.+0      	; 0x1860 <GPIO_writePin+0x6>
    1860:	00 d0       	rcall	.+0      	; 0x1862 <GPIO_writePin+0x8>
    1862:	0f 92       	push	r0
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	89 83       	std	Y+1, r24	; 0x01
    186a:	6a 83       	std	Y+2, r22	; 0x02
    186c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    186e:	8a 81       	ldd	r24, Y+2	; 0x02
    1870:	88 30       	cpi	r24, 0x08	; 8
    1872:	08 f0       	brcs	.+2      	; 0x1876 <GPIO_writePin+0x1c>
    1874:	d5 c0       	rjmp	.+426    	; 0x1a20 <GPIO_writePin+0x1c6>
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	84 30       	cpi	r24, 0x04	; 4
    187a:	08 f0       	brcs	.+2      	; 0x187e <GPIO_writePin+0x24>
    187c:	d1 c0       	rjmp	.+418    	; 0x1a20 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	3d 83       	std	Y+5, r19	; 0x05
    1886:	2c 83       	std	Y+4, r18	; 0x04
    1888:	8c 81       	ldd	r24, Y+4	; 0x04
    188a:	9d 81       	ldd	r25, Y+5	; 0x05
    188c:	81 30       	cpi	r24, 0x01	; 1
    188e:	91 05       	cpc	r25, r1
    1890:	09 f4       	brne	.+2      	; 0x1894 <GPIO_writePin+0x3a>
    1892:	43 c0       	rjmp	.+134    	; 0x191a <GPIO_writePin+0xc0>
    1894:	2c 81       	ldd	r18, Y+4	; 0x04
    1896:	3d 81       	ldd	r19, Y+5	; 0x05
    1898:	22 30       	cpi	r18, 0x02	; 2
    189a:	31 05       	cpc	r19, r1
    189c:	2c f4       	brge	.+10     	; 0x18a8 <GPIO_writePin+0x4e>
    189e:	8c 81       	ldd	r24, Y+4	; 0x04
    18a0:	9d 81       	ldd	r25, Y+5	; 0x05
    18a2:	00 97       	sbiw	r24, 0x00	; 0
    18a4:	71 f0       	breq	.+28     	; 0x18c2 <GPIO_writePin+0x68>
    18a6:	bc c0       	rjmp	.+376    	; 0x1a20 <GPIO_writePin+0x1c6>
    18a8:	2c 81       	ldd	r18, Y+4	; 0x04
    18aa:	3d 81       	ldd	r19, Y+5	; 0x05
    18ac:	22 30       	cpi	r18, 0x02	; 2
    18ae:	31 05       	cpc	r19, r1
    18b0:	09 f4       	brne	.+2      	; 0x18b4 <GPIO_writePin+0x5a>
    18b2:	5f c0       	rjmp	.+190    	; 0x1972 <GPIO_writePin+0x118>
    18b4:	8c 81       	ldd	r24, Y+4	; 0x04
    18b6:	9d 81       	ldd	r25, Y+5	; 0x05
    18b8:	83 30       	cpi	r24, 0x03	; 3
    18ba:	91 05       	cpc	r25, r1
    18bc:	09 f4       	brne	.+2      	; 0x18c0 <GPIO_writePin+0x66>
    18be:	85 c0       	rjmp	.+266    	; 0x19ca <GPIO_writePin+0x170>
    18c0:	af c0       	rjmp	.+350    	; 0x1a20 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    18c2:	8b 81       	ldd	r24, Y+3	; 0x03
    18c4:	81 30       	cpi	r24, 0x01	; 1
    18c6:	a1 f4       	brne	.+40     	; 0x18f0 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    18c8:	ab e3       	ldi	r26, 0x3B	; 59
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	eb e3       	ldi	r30, 0x3B	; 59
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	48 2f       	mov	r20, r24
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	28 2f       	mov	r18, r24
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	02 2e       	mov	r0, r18
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <GPIO_writePin+0x8c>
    18e2:	88 0f       	add	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	0a 94       	dec	r0
    18e8:	e2 f7       	brpl	.-8      	; 0x18e2 <GPIO_writePin+0x88>
    18ea:	84 2b       	or	r24, r20
    18ec:	8c 93       	st	X, r24
    18ee:	98 c0       	rjmp	.+304    	; 0x1a20 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    18f0:	ab e3       	ldi	r26, 0x3B	; 59
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	eb e3       	ldi	r30, 0x3B	; 59
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	48 2f       	mov	r20, r24
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	02 2e       	mov	r0, r18
    1908:	02 c0       	rjmp	.+4      	; 0x190e <GPIO_writePin+0xb4>
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	0a 94       	dec	r0
    1910:	e2 f7       	brpl	.-8      	; 0x190a <GPIO_writePin+0xb0>
    1912:	80 95       	com	r24
    1914:	84 23       	and	r24, r20
    1916:	8c 93       	st	X, r24
    1918:	83 c0       	rjmp	.+262    	; 0x1a20 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    191a:	8b 81       	ldd	r24, Y+3	; 0x03
    191c:	81 30       	cpi	r24, 0x01	; 1
    191e:	a1 f4       	brne	.+40     	; 0x1948 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1920:	a8 e3       	ldi	r26, 0x38	; 56
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e8 e3       	ldi	r30, 0x38	; 56
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	48 2f       	mov	r20, r24
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	28 2f       	mov	r18, r24
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	02 2e       	mov	r0, r18
    1938:	02 c0       	rjmp	.+4      	; 0x193e <GPIO_writePin+0xe4>
    193a:	88 0f       	add	r24, r24
    193c:	99 1f       	adc	r25, r25
    193e:	0a 94       	dec	r0
    1940:	e2 f7       	brpl	.-8      	; 0x193a <GPIO_writePin+0xe0>
    1942:	84 2b       	or	r24, r20
    1944:	8c 93       	st	X, r24
    1946:	6c c0       	rjmp	.+216    	; 0x1a20 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1948:	a8 e3       	ldi	r26, 0x38	; 56
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	e8 e3       	ldi	r30, 0x38	; 56
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	48 2f       	mov	r20, r24
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	28 2f       	mov	r18, r24
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	02 2e       	mov	r0, r18
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <GPIO_writePin+0x10c>
    1962:	88 0f       	add	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	0a 94       	dec	r0
    1968:	e2 f7       	brpl	.-8      	; 0x1962 <GPIO_writePin+0x108>
    196a:	80 95       	com	r24
    196c:	84 23       	and	r24, r20
    196e:	8c 93       	st	X, r24
    1970:	57 c0       	rjmp	.+174    	; 0x1a20 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1972:	8b 81       	ldd	r24, Y+3	; 0x03
    1974:	81 30       	cpi	r24, 0x01	; 1
    1976:	a1 f4       	brne	.+40     	; 0x19a0 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1978:	a5 e3       	ldi	r26, 0x35	; 53
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	e5 e3       	ldi	r30, 0x35	; 53
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	48 2f       	mov	r20, r24
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	28 2f       	mov	r18, r24
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	02 2e       	mov	r0, r18
    1990:	02 c0       	rjmp	.+4      	; 0x1996 <GPIO_writePin+0x13c>
    1992:	88 0f       	add	r24, r24
    1994:	99 1f       	adc	r25, r25
    1996:	0a 94       	dec	r0
    1998:	e2 f7       	brpl	.-8      	; 0x1992 <GPIO_writePin+0x138>
    199a:	84 2b       	or	r24, r20
    199c:	8c 93       	st	X, r24
    199e:	40 c0       	rjmp	.+128    	; 0x1a20 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    19a0:	a5 e3       	ldi	r26, 0x35	; 53
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	e5 e3       	ldi	r30, 0x35	; 53
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	48 2f       	mov	r20, r24
    19ac:	8a 81       	ldd	r24, Y+2	; 0x02
    19ae:	28 2f       	mov	r18, r24
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	02 2e       	mov	r0, r18
    19b8:	02 c0       	rjmp	.+4      	; 0x19be <GPIO_writePin+0x164>
    19ba:	88 0f       	add	r24, r24
    19bc:	99 1f       	adc	r25, r25
    19be:	0a 94       	dec	r0
    19c0:	e2 f7       	brpl	.-8      	; 0x19ba <GPIO_writePin+0x160>
    19c2:	80 95       	com	r24
    19c4:	84 23       	and	r24, r20
    19c6:	8c 93       	st	X, r24
    19c8:	2b c0       	rjmp	.+86     	; 0x1a20 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    19ca:	8b 81       	ldd	r24, Y+3	; 0x03
    19cc:	81 30       	cpi	r24, 0x01	; 1
    19ce:	a1 f4       	brne	.+40     	; 0x19f8 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    19d0:	a2 e3       	ldi	r26, 0x32	; 50
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	e2 e3       	ldi	r30, 0x32	; 50
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	48 2f       	mov	r20, r24
    19dc:	8a 81       	ldd	r24, Y+2	; 0x02
    19de:	28 2f       	mov	r18, r24
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	02 2e       	mov	r0, r18
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <GPIO_writePin+0x194>
    19ea:	88 0f       	add	r24, r24
    19ec:	99 1f       	adc	r25, r25
    19ee:	0a 94       	dec	r0
    19f0:	e2 f7       	brpl	.-8      	; 0x19ea <GPIO_writePin+0x190>
    19f2:	84 2b       	or	r24, r20
    19f4:	8c 93       	st	X, r24
    19f6:	14 c0       	rjmp	.+40     	; 0x1a20 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    19f8:	a2 e3       	ldi	r26, 0x32	; 50
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	e2 e3       	ldi	r30, 0x32	; 50
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	48 2f       	mov	r20, r24
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	02 2e       	mov	r0, r18
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <GPIO_writePin+0x1bc>
    1a12:	88 0f       	add	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	0a 94       	dec	r0
    1a18:	e2 f7       	brpl	.-8      	; 0x1a12 <GPIO_writePin+0x1b8>
    1a1a:	80 95       	com	r24
    1a1c:	84 23       	and	r24, r20
    1a1e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	08 95       	ret

00001a30 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	00 d0       	rcall	.+0      	; 0x1a36 <GPIO_readPin+0x6>
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <GPIO_readPin+0x8>
    1a38:	0f 92       	push	r0
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	8a 83       	std	Y+2, r24	; 0x02
    1a40:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1a42:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a44:	8b 81       	ldd	r24, Y+3	; 0x03
    1a46:	88 30       	cpi	r24, 0x08	; 8
    1a48:	08 f0       	brcs	.+2      	; 0x1a4c <GPIO_readPin+0x1c>
    1a4a:	84 c0       	rjmp	.+264    	; 0x1b54 <GPIO_readPin+0x124>
    1a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4e:	84 30       	cpi	r24, 0x04	; 4
    1a50:	08 f0       	brcs	.+2      	; 0x1a54 <GPIO_readPin+0x24>
    1a52:	80 c0       	rjmp	.+256    	; 0x1b54 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1a54:	8a 81       	ldd	r24, Y+2	; 0x02
    1a56:	28 2f       	mov	r18, r24
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	3d 83       	std	Y+5, r19	; 0x05
    1a5c:	2c 83       	std	Y+4, r18	; 0x04
    1a5e:	4c 81       	ldd	r20, Y+4	; 0x04
    1a60:	5d 81       	ldd	r21, Y+5	; 0x05
    1a62:	41 30       	cpi	r20, 0x01	; 1
    1a64:	51 05       	cpc	r21, r1
    1a66:	79 f1       	breq	.+94     	; 0x1ac6 <GPIO_readPin+0x96>
    1a68:	8c 81       	ldd	r24, Y+4	; 0x04
    1a6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a6c:	82 30       	cpi	r24, 0x02	; 2
    1a6e:	91 05       	cpc	r25, r1
    1a70:	34 f4       	brge	.+12     	; 0x1a7e <GPIO_readPin+0x4e>
    1a72:	2c 81       	ldd	r18, Y+4	; 0x04
    1a74:	3d 81       	ldd	r19, Y+5	; 0x05
    1a76:	21 15       	cp	r18, r1
    1a78:	31 05       	cpc	r19, r1
    1a7a:	69 f0       	breq	.+26     	; 0x1a96 <GPIO_readPin+0x66>
    1a7c:	6b c0       	rjmp	.+214    	; 0x1b54 <GPIO_readPin+0x124>
    1a7e:	4c 81       	ldd	r20, Y+4	; 0x04
    1a80:	5d 81       	ldd	r21, Y+5	; 0x05
    1a82:	42 30       	cpi	r20, 0x02	; 2
    1a84:	51 05       	cpc	r21, r1
    1a86:	b9 f1       	breq	.+110    	; 0x1af6 <GPIO_readPin+0xc6>
    1a88:	8c 81       	ldd	r24, Y+4	; 0x04
    1a8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a8c:	83 30       	cpi	r24, 0x03	; 3
    1a8e:	91 05       	cpc	r25, r1
    1a90:	09 f4       	brne	.+2      	; 0x1a94 <GPIO_readPin+0x64>
    1a92:	49 c0       	rjmp	.+146    	; 0x1b26 <GPIO_readPin+0xf6>
    1a94:	5f c0       	rjmp	.+190    	; 0x1b54 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1a96:	e9 e3       	ldi	r30, 0x39	; 57
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	28 2f       	mov	r18, r24
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa2:	88 2f       	mov	r24, r24
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	a9 01       	movw	r20, r18
    1aa8:	02 c0       	rjmp	.+4      	; 0x1aae <GPIO_readPin+0x7e>
    1aaa:	55 95       	asr	r21
    1aac:	47 95       	ror	r20
    1aae:	8a 95       	dec	r24
    1ab0:	e2 f7       	brpl	.-8      	; 0x1aaa <GPIO_readPin+0x7a>
    1ab2:	ca 01       	movw	r24, r20
    1ab4:	81 70       	andi	r24, 0x01	; 1
    1ab6:	90 70       	andi	r25, 0x00	; 0
    1ab8:	88 23       	and	r24, r24
    1aba:	19 f0       	breq	.+6      	; 0x1ac2 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	89 83       	std	Y+1, r24	; 0x01
    1ac0:	49 c0       	rjmp	.+146    	; 0x1b54 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ac2:	19 82       	std	Y+1, r1	; 0x01
    1ac4:	47 c0       	rjmp	.+142    	; 0x1b54 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1ac6:	e6 e3       	ldi	r30, 0x36	; 54
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	28 2f       	mov	r18, r24
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad2:	88 2f       	mov	r24, r24
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	a9 01       	movw	r20, r18
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <GPIO_readPin+0xae>
    1ada:	55 95       	asr	r21
    1adc:	47 95       	ror	r20
    1ade:	8a 95       	dec	r24
    1ae0:	e2 f7       	brpl	.-8      	; 0x1ada <GPIO_readPin+0xaa>
    1ae2:	ca 01       	movw	r24, r20
    1ae4:	81 70       	andi	r24, 0x01	; 1
    1ae6:	90 70       	andi	r25, 0x00	; 0
    1ae8:	88 23       	and	r24, r24
    1aea:	19 f0       	breq	.+6      	; 0x1af2 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	89 83       	std	Y+1, r24	; 0x01
    1af0:	31 c0       	rjmp	.+98     	; 0x1b54 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1af2:	19 82       	std	Y+1, r1	; 0x01
    1af4:	2f c0       	rjmp	.+94     	; 0x1b54 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1af6:	e3 e3       	ldi	r30, 0x33	; 51
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	28 2f       	mov	r18, r24
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	88 2f       	mov	r24, r24
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	a9 01       	movw	r20, r18
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <GPIO_readPin+0xde>
    1b0a:	55 95       	asr	r21
    1b0c:	47 95       	ror	r20
    1b0e:	8a 95       	dec	r24
    1b10:	e2 f7       	brpl	.-8      	; 0x1b0a <GPIO_readPin+0xda>
    1b12:	ca 01       	movw	r24, r20
    1b14:	81 70       	andi	r24, 0x01	; 1
    1b16:	90 70       	andi	r25, 0x00	; 0
    1b18:	88 23       	and	r24, r24
    1b1a:	19 f0       	breq	.+6      	; 0x1b22 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	89 83       	std	Y+1, r24	; 0x01
    1b20:	19 c0       	rjmp	.+50     	; 0x1b54 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b22:	19 82       	std	Y+1, r1	; 0x01
    1b24:	17 c0       	rjmp	.+46     	; 0x1b54 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1b26:	e0 e3       	ldi	r30, 0x30	; 48
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	28 2f       	mov	r18, r24
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	88 2f       	mov	r24, r24
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	a9 01       	movw	r20, r18
    1b38:	02 c0       	rjmp	.+4      	; 0x1b3e <GPIO_readPin+0x10e>
    1b3a:	55 95       	asr	r21
    1b3c:	47 95       	ror	r20
    1b3e:	8a 95       	dec	r24
    1b40:	e2 f7       	brpl	.-8      	; 0x1b3a <GPIO_readPin+0x10a>
    1b42:	ca 01       	movw	r24, r20
    1b44:	81 70       	andi	r24, 0x01	; 1
    1b46:	90 70       	andi	r25, 0x00	; 0
    1b48:	88 23       	and	r24, r24
    1b4a:	19 f0       	breq	.+6      	; 0x1b52 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	89 83       	std	Y+1, r24	; 0x01
    1b50:	01 c0       	rjmp	.+2      	; 0x1b54 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b52:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1b54:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b56:	0f 90       	pop	r0
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	cf 91       	pop	r28
    1b62:	df 91       	pop	r29
    1b64:	08 95       	ret

00001b66 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1b66:	df 93       	push	r29
    1b68:	cf 93       	push	r28
    1b6a:	00 d0       	rcall	.+0      	; 0x1b6c <GPIO_setupPortDirection+0x6>
    1b6c:	00 d0       	rcall	.+0      	; 0x1b6e <GPIO_setupPortDirection+0x8>
    1b6e:	cd b7       	in	r28, 0x3d	; 61
    1b70:	de b7       	in	r29, 0x3e	; 62
    1b72:	89 83       	std	Y+1, r24	; 0x01
    1b74:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	84 30       	cpi	r24, 0x04	; 4
    1b7a:	90 f5       	brcc	.+100    	; 0x1be0 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1b7c:	89 81       	ldd	r24, Y+1	; 0x01
    1b7e:	28 2f       	mov	r18, r24
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	3c 83       	std	Y+4, r19	; 0x04
    1b84:	2b 83       	std	Y+3, r18	; 0x03
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8a:	81 30       	cpi	r24, 0x01	; 1
    1b8c:	91 05       	cpc	r25, r1
    1b8e:	d1 f0       	breq	.+52     	; 0x1bc4 <GPIO_setupPortDirection+0x5e>
    1b90:	2b 81       	ldd	r18, Y+3	; 0x03
    1b92:	3c 81       	ldd	r19, Y+4	; 0x04
    1b94:	22 30       	cpi	r18, 0x02	; 2
    1b96:	31 05       	cpc	r19, r1
    1b98:	2c f4       	brge	.+10     	; 0x1ba4 <GPIO_setupPortDirection+0x3e>
    1b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9e:	00 97       	sbiw	r24, 0x00	; 0
    1ba0:	61 f0       	breq	.+24     	; 0x1bba <GPIO_setupPortDirection+0x54>
    1ba2:	1e c0       	rjmp	.+60     	; 0x1be0 <GPIO_setupPortDirection+0x7a>
    1ba4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ba8:	22 30       	cpi	r18, 0x02	; 2
    1baa:	31 05       	cpc	r19, r1
    1bac:	81 f0       	breq	.+32     	; 0x1bce <GPIO_setupPortDirection+0x68>
    1bae:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb2:	83 30       	cpi	r24, 0x03	; 3
    1bb4:	91 05       	cpc	r25, r1
    1bb6:	81 f0       	breq	.+32     	; 0x1bd8 <GPIO_setupPortDirection+0x72>
    1bb8:	13 c0       	rjmp	.+38     	; 0x1be0 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1bba:	ea e3       	ldi	r30, 0x3A	; 58
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc0:	80 83       	st	Z, r24
    1bc2:	0e c0       	rjmp	.+28     	; 0x1be0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1bc4:	e7 e3       	ldi	r30, 0x37	; 55
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bca:	80 83       	st	Z, r24
    1bcc:	09 c0       	rjmp	.+18     	; 0x1be0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1bce:	e4 e3       	ldi	r30, 0x34	; 52
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd4:	80 83       	st	Z, r24
    1bd6:	04 c0       	rjmp	.+8      	; 0x1be0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1bd8:	e1 e3       	ldi	r30, 0x31	; 49
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bde:	80 83       	st	Z, r24
			break;
		}
	}
}
    1be0:	0f 90       	pop	r0
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	cf 91       	pop	r28
    1bea:	df 91       	pop	r29
    1bec:	08 95       	ret

00001bee <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1bee:	df 93       	push	r29
    1bf0:	cf 93       	push	r28
    1bf2:	00 d0       	rcall	.+0      	; 0x1bf4 <GPIO_writePort+0x6>
    1bf4:	00 d0       	rcall	.+0      	; 0x1bf6 <GPIO_writePort+0x8>
    1bf6:	cd b7       	in	r28, 0x3d	; 61
    1bf8:	de b7       	in	r29, 0x3e	; 62
    1bfa:	89 83       	std	Y+1, r24	; 0x01
    1bfc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	84 30       	cpi	r24, 0x04	; 4
    1c02:	90 f5       	brcc	.+100    	; 0x1c68 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
    1c06:	28 2f       	mov	r18, r24
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	3c 83       	std	Y+4, r19	; 0x04
    1c0c:	2b 83       	std	Y+3, r18	; 0x03
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	9c 81       	ldd	r25, Y+4	; 0x04
    1c12:	81 30       	cpi	r24, 0x01	; 1
    1c14:	91 05       	cpc	r25, r1
    1c16:	d1 f0       	breq	.+52     	; 0x1c4c <GPIO_writePort+0x5e>
    1c18:	2b 81       	ldd	r18, Y+3	; 0x03
    1c1a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c1c:	22 30       	cpi	r18, 0x02	; 2
    1c1e:	31 05       	cpc	r19, r1
    1c20:	2c f4       	brge	.+10     	; 0x1c2c <GPIO_writePort+0x3e>
    1c22:	8b 81       	ldd	r24, Y+3	; 0x03
    1c24:	9c 81       	ldd	r25, Y+4	; 0x04
    1c26:	00 97       	sbiw	r24, 0x00	; 0
    1c28:	61 f0       	breq	.+24     	; 0x1c42 <GPIO_writePort+0x54>
    1c2a:	1e c0       	rjmp	.+60     	; 0x1c68 <GPIO_writePort+0x7a>
    1c2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c2e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c30:	22 30       	cpi	r18, 0x02	; 2
    1c32:	31 05       	cpc	r19, r1
    1c34:	81 f0       	breq	.+32     	; 0x1c56 <GPIO_writePort+0x68>
    1c36:	8b 81       	ldd	r24, Y+3	; 0x03
    1c38:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3a:	83 30       	cpi	r24, 0x03	; 3
    1c3c:	91 05       	cpc	r25, r1
    1c3e:	81 f0       	breq	.+32     	; 0x1c60 <GPIO_writePort+0x72>
    1c40:	13 c0       	rjmp	.+38     	; 0x1c68 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1c42:	eb e3       	ldi	r30, 0x3B	; 59
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	80 83       	st	Z, r24
    1c4a:	0e c0       	rjmp	.+28     	; 0x1c68 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1c4c:	e8 e3       	ldi	r30, 0x38	; 56
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	80 83       	st	Z, r24
    1c54:	09 c0       	rjmp	.+18     	; 0x1c68 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1c56:	e5 e3       	ldi	r30, 0x35	; 53
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5c:	80 83       	st	Z, r24
    1c5e:	04 c0       	rjmp	.+8      	; 0x1c68 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1c60:	e2 e3       	ldi	r30, 0x32	; 50
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	cf 91       	pop	r28
    1c72:	df 91       	pop	r29
    1c74:	08 95       	ret

00001c76 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1c76:	df 93       	push	r29
    1c78:	cf 93       	push	r28
    1c7a:	00 d0       	rcall	.+0      	; 0x1c7c <GPIO_readPort+0x6>
    1c7c:	00 d0       	rcall	.+0      	; 0x1c7e <GPIO_readPort+0x8>
    1c7e:	cd b7       	in	r28, 0x3d	; 61
    1c80:	de b7       	in	r29, 0x3e	; 62
    1c82:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1c84:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	84 30       	cpi	r24, 0x04	; 4
    1c8a:	90 f5       	brcc	.+100    	; 0x1cf0 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8e:	28 2f       	mov	r18, r24
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	3c 83       	std	Y+4, r19	; 0x04
    1c94:	2b 83       	std	Y+3, r18	; 0x03
    1c96:	8b 81       	ldd	r24, Y+3	; 0x03
    1c98:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9a:	81 30       	cpi	r24, 0x01	; 1
    1c9c:	91 05       	cpc	r25, r1
    1c9e:	d1 f0       	breq	.+52     	; 0x1cd4 <GPIO_readPort+0x5e>
    1ca0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ca2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ca4:	22 30       	cpi	r18, 0x02	; 2
    1ca6:	31 05       	cpc	r19, r1
    1ca8:	2c f4       	brge	.+10     	; 0x1cb4 <GPIO_readPort+0x3e>
    1caa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cac:	9c 81       	ldd	r25, Y+4	; 0x04
    1cae:	00 97       	sbiw	r24, 0x00	; 0
    1cb0:	61 f0       	breq	.+24     	; 0x1cca <GPIO_readPort+0x54>
    1cb2:	1e c0       	rjmp	.+60     	; 0x1cf0 <GPIO_readPort+0x7a>
    1cb4:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb6:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb8:	22 30       	cpi	r18, 0x02	; 2
    1cba:	31 05       	cpc	r19, r1
    1cbc:	81 f0       	breq	.+32     	; 0x1cde <GPIO_readPort+0x68>
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc2:	83 30       	cpi	r24, 0x03	; 3
    1cc4:	91 05       	cpc	r25, r1
    1cc6:	81 f0       	breq	.+32     	; 0x1ce8 <GPIO_readPort+0x72>
    1cc8:	13 c0       	rjmp	.+38     	; 0x1cf0 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1cca:	e9 e3       	ldi	r30, 0x39	; 57
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	89 83       	std	Y+1, r24	; 0x01
    1cd2:	0e c0       	rjmp	.+28     	; 0x1cf0 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1cd4:	e6 e3       	ldi	r30, 0x36	; 54
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	89 83       	std	Y+1, r24	; 0x01
    1cdc:	09 c0       	rjmp	.+18     	; 0x1cf0 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1cde:	e3 e3       	ldi	r30, 0x33	; 51
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	89 83       	std	Y+1, r24	; 0x01
    1ce6:	04 c0       	rjmp	.+8      	; 0x1cf0 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1ce8:	e0 e3       	ldi	r30, 0x30	; 48
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	cf 91       	pop	r28
    1cfc:	df 91       	pop	r29
    1cfe:	08 95       	ret

00001d00 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1d00:	df 93       	push	r29
    1d02:	cf 93       	push	r28
    1d04:	00 d0       	rcall	.+0      	; 0x1d06 <KEYPAD_getPressedKey+0x6>
    1d06:	0f 92       	push	r0
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1d0c:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1d0e:	1b 82       	std	Y+3, r1	; 0x03
    1d10:	43 c0       	rjmp	.+134    	; 0x1d98 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1d12:	82 e0       	ldi	r24, 0x02	; 2
    1d14:	60 e0       	ldi	r22, 0x00	; 0
    1d16:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	98 2f       	mov	r25, r24
    1d1e:	9c 5f       	subi	r25, 0xFC	; 252
    1d20:	82 e0       	ldi	r24, 0x02	; 2
    1d22:	69 2f       	mov	r22, r25
    1d24:	41 e0       	ldi	r20, 0x01	; 1
    1d26:	0e 94 42 0b 	call	0x1684	; 0x1684 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2c:	88 2f       	mov	r24, r24
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	9c 01       	movw	r18, r24
    1d32:	2c 5f       	subi	r18, 0xFC	; 252
    1d34:	3f 4f       	sbci	r19, 0xFF	; 255
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	02 c0       	rjmp	.+4      	; 0x1d40 <KEYPAD_getPressedKey+0x40>
    1d3c:	88 0f       	add	r24, r24
    1d3e:	99 1f       	adc	r25, r25
    1d40:	2a 95       	dec	r18
    1d42:	e2 f7       	brpl	.-8      	; 0x1d3c <KEYPAD_getPressedKey+0x3c>
    1d44:	80 95       	com	r24
    1d46:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1d48:	82 e0       	ldi	r24, 0x02	; 2
    1d4a:	69 81       	ldd	r22, Y+1	; 0x01
    1d4c:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1d50:	1a 82       	std	Y+2, r1	; 0x02
    1d52:	1c c0       	rjmp	.+56     	; 0x1d8c <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1d54:	82 e0       	ldi	r24, 0x02	; 2
    1d56:	6a 81       	ldd	r22, Y+2	; 0x02
    1d58:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <GPIO_readPin>
    1d5c:	88 23       	and	r24, r24
    1d5e:	99 f4       	brne	.+38     	; 0x1d86 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	88 2f       	mov	r24, r24
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	88 0f       	add	r24, r24
    1d68:	99 1f       	adc	r25, r25
    1d6a:	88 0f       	add	r24, r24
    1d6c:	99 1f       	adc	r25, r25
    1d6e:	98 2f       	mov	r25, r24
    1d70:	8b 81       	ldd	r24, Y+3	; 0x03
    1d72:	89 0f       	add	r24, r25
    1d74:	8f 5f       	subi	r24, 0xFF	; 255
    1d76:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1d7a:	0f 90       	pop	r0
    1d7c:	0f 90       	pop	r0
    1d7e:	0f 90       	pop	r0
    1d80:	cf 91       	pop	r28
    1d82:	df 91       	pop	r29
    1d84:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	8f 5f       	subi	r24, 0xFF	; 255
    1d8a:	8a 83       	std	Y+2, r24	; 0x02
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	84 30       	cpi	r24, 0x04	; 4
    1d90:	08 f3       	brcs	.-62     	; 0x1d54 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	8f 5f       	subi	r24, 0xFF	; 255
    1d96:	8b 83       	std	Y+3, r24	; 0x03
    1d98:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9a:	84 30       	cpi	r24, 0x04	; 4
    1d9c:	08 f4       	brcc	.+2      	; 0x1da0 <KEYPAD_getPressedKey+0xa0>
    1d9e:	b9 cf       	rjmp	.-142    	; 0x1d12 <KEYPAD_getPressedKey+0x12>
    1da0:	b6 cf       	rjmp	.-148    	; 0x1d0e <KEYPAD_getPressedKey+0xe>

00001da2 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1da2:	df 93       	push	r29
    1da4:	cf 93       	push	r28
    1da6:	00 d0       	rcall	.+0      	; 0x1da8 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1da8:	00 d0       	rcall	.+0      	; 0x1daa <KEYPAD_4x4_adjustKeyNumber+0x8>
    1daa:	cd b7       	in	r28, 0x3d	; 61
    1dac:	de b7       	in	r29, 0x3e	; 62
    1dae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1db0:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1db2:	8a 81       	ldd	r24, Y+2	; 0x02
    1db4:	28 2f       	mov	r18, r24
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	3c 83       	std	Y+4, r19	; 0x04
    1dba:	2b 83       	std	Y+3, r18	; 0x03
    1dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc0:	88 30       	cpi	r24, 0x08	; 8
    1dc2:	91 05       	cpc	r25, r1
    1dc4:	09 f4       	brne	.+2      	; 0x1dc8 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1dc6:	70 c0       	rjmp	.+224    	; 0x1ea8 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1dc8:	2b 81       	ldd	r18, Y+3	; 0x03
    1dca:	3c 81       	ldd	r19, Y+4	; 0x04
    1dcc:	29 30       	cpi	r18, 0x09	; 9
    1dce:	31 05       	cpc	r19, r1
    1dd0:	5c f5       	brge	.+86     	; 0x1e28 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd6:	84 30       	cpi	r24, 0x04	; 4
    1dd8:	91 05       	cpc	r25, r1
    1dda:	09 f4       	brne	.+2      	; 0x1dde <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1ddc:	59 c0       	rjmp	.+178    	; 0x1e90 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1dde:	2b 81       	ldd	r18, Y+3	; 0x03
    1de0:	3c 81       	ldd	r19, Y+4	; 0x04
    1de2:	25 30       	cpi	r18, 0x05	; 5
    1de4:	31 05       	cpc	r19, r1
    1de6:	9c f4       	brge	.+38     	; 0x1e0e <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1de8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dea:	9c 81       	ldd	r25, Y+4	; 0x04
    1dec:	82 30       	cpi	r24, 0x02	; 2
    1dee:	91 05       	cpc	r25, r1
    1df0:	09 f4       	brne	.+2      	; 0x1df4 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1df2:	48 c0       	rjmp	.+144    	; 0x1e84 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1df4:	2b 81       	ldd	r18, Y+3	; 0x03
    1df6:	3c 81       	ldd	r19, Y+4	; 0x04
    1df8:	23 30       	cpi	r18, 0x03	; 3
    1dfa:	31 05       	cpc	r19, r1
    1dfc:	0c f0       	brlt	.+2      	; 0x1e00 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1dfe:	45 c0       	rjmp	.+138    	; 0x1e8a <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1e00:	8b 81       	ldd	r24, Y+3	; 0x03
    1e02:	9c 81       	ldd	r25, Y+4	; 0x04
    1e04:	81 30       	cpi	r24, 0x01	; 1
    1e06:	91 05       	cpc	r25, r1
    1e08:	09 f4       	brne	.+2      	; 0x1e0c <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1e0a:	39 c0       	rjmp	.+114    	; 0x1e7e <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1e0c:	67 c0       	rjmp	.+206    	; 0x1edc <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1e0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e10:	3c 81       	ldd	r19, Y+4	; 0x04
    1e12:	26 30       	cpi	r18, 0x06	; 6
    1e14:	31 05       	cpc	r19, r1
    1e16:	09 f4       	brne	.+2      	; 0x1e1a <KEYPAD_4x4_adjustKeyNumber+0x78>
    1e18:	41 c0       	rjmp	.+130    	; 0x1e9c <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1e:	87 30       	cpi	r24, 0x07	; 7
    1e20:	91 05       	cpc	r25, r1
    1e22:	0c f0       	brlt	.+2      	; 0x1e26 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1e24:	3e c0       	rjmp	.+124    	; 0x1ea2 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1e26:	37 c0       	rjmp	.+110    	; 0x1e96 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1e28:	2b 81       	ldd	r18, Y+3	; 0x03
    1e2a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e2c:	2c 30       	cpi	r18, 0x0C	; 12
    1e2e:	31 05       	cpc	r19, r1
    1e30:	09 f4       	brne	.+2      	; 0x1e34 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1e32:	46 c0       	rjmp	.+140    	; 0x1ec0 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1e34:	8b 81       	ldd	r24, Y+3	; 0x03
    1e36:	9c 81       	ldd	r25, Y+4	; 0x04
    1e38:	8d 30       	cpi	r24, 0x0D	; 13
    1e3a:	91 05       	cpc	r25, r1
    1e3c:	5c f4       	brge	.+22     	; 0x1e54 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1e3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e40:	3c 81       	ldd	r19, Y+4	; 0x04
    1e42:	2a 30       	cpi	r18, 0x0A	; 10
    1e44:	31 05       	cpc	r19, r1
    1e46:	b1 f1       	breq	.+108    	; 0x1eb4 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1e48:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4c:	8b 30       	cpi	r24, 0x0B	; 11
    1e4e:	91 05       	cpc	r25, r1
    1e50:	a4 f5       	brge	.+104    	; 0x1eba <KEYPAD_4x4_adjustKeyNumber+0x118>
    1e52:	2d c0       	rjmp	.+90     	; 0x1eae <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1e54:	2b 81       	ldd	r18, Y+3	; 0x03
    1e56:	3c 81       	ldd	r19, Y+4	; 0x04
    1e58:	2e 30       	cpi	r18, 0x0E	; 14
    1e5a:	31 05       	cpc	r19, r1
    1e5c:	b9 f1       	breq	.+110    	; 0x1ecc <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	9c 81       	ldd	r25, Y+4	; 0x04
    1e62:	8e 30       	cpi	r24, 0x0E	; 14
    1e64:	91 05       	cpc	r25, r1
    1e66:	7c f1       	brlt	.+94     	; 0x1ec6 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1e68:	2b 81       	ldd	r18, Y+3	; 0x03
    1e6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e6c:	2f 30       	cpi	r18, 0x0F	; 15
    1e6e:	31 05       	cpc	r19, r1
    1e70:	79 f1       	breq	.+94     	; 0x1ed0 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	9c 81       	ldd	r25, Y+4	; 0x04
    1e76:	80 31       	cpi	r24, 0x10	; 16
    1e78:	91 05       	cpc	r25, r1
    1e7a:	69 f1       	breq	.+90     	; 0x1ed6 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1e7c:	2f c0       	rjmp	.+94     	; 0x1edc <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1e7e:	87 e0       	ldi	r24, 0x07	; 7
    1e80:	89 83       	std	Y+1, r24	; 0x01
    1e82:	2e c0       	rjmp	.+92     	; 0x1ee0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1e84:	88 e0       	ldi	r24, 0x08	; 8
    1e86:	89 83       	std	Y+1, r24	; 0x01
    1e88:	2b c0       	rjmp	.+86     	; 0x1ee0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1e8a:	89 e0       	ldi	r24, 0x09	; 9
    1e8c:	89 83       	std	Y+1, r24	; 0x01
    1e8e:	28 c0       	rjmp	.+80     	; 0x1ee0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1e90:	85 e2       	ldi	r24, 0x25	; 37
    1e92:	89 83       	std	Y+1, r24	; 0x01
    1e94:	25 c0       	rjmp	.+74     	; 0x1ee0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1e96:	84 e0       	ldi	r24, 0x04	; 4
    1e98:	89 83       	std	Y+1, r24	; 0x01
    1e9a:	22 c0       	rjmp	.+68     	; 0x1ee0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1e9c:	85 e0       	ldi	r24, 0x05	; 5
    1e9e:	89 83       	std	Y+1, r24	; 0x01
    1ea0:	1f c0       	rjmp	.+62     	; 0x1ee0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1ea2:	86 e0       	ldi	r24, 0x06	; 6
    1ea4:	89 83       	std	Y+1, r24	; 0x01
    1ea6:	1c c0       	rjmp	.+56     	; 0x1ee0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1ea8:	8a e2       	ldi	r24, 0x2A	; 42
    1eaa:	89 83       	std	Y+1, r24	; 0x01
    1eac:	19 c0       	rjmp	.+50     	; 0x1ee0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	89 83       	std	Y+1, r24	; 0x01
    1eb2:	16 c0       	rjmp	.+44     	; 0x1ee0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1eb4:	82 e0       	ldi	r24, 0x02	; 2
    1eb6:	89 83       	std	Y+1, r24	; 0x01
    1eb8:	13 c0       	rjmp	.+38     	; 0x1ee0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1eba:	83 e0       	ldi	r24, 0x03	; 3
    1ebc:	89 83       	std	Y+1, r24	; 0x01
    1ebe:	10 c0       	rjmp	.+32     	; 0x1ee0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1ec0:	8d e2       	ldi	r24, 0x2D	; 45
    1ec2:	89 83       	std	Y+1, r24	; 0x01
    1ec4:	0d c0       	rjmp	.+26     	; 0x1ee0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1ec6:	8d e0       	ldi	r24, 0x0D	; 13
    1ec8:	89 83       	std	Y+1, r24	; 0x01
    1eca:	0a c0       	rjmp	.+20     	; 0x1ee0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1ecc:	19 82       	std	Y+1, r1	; 0x01
    1ece:	08 c0       	rjmp	.+16     	; 0x1ee0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1ed0:	8d e3       	ldi	r24, 0x3D	; 61
    1ed2:	89 83       	std	Y+1, r24	; 0x01
    1ed4:	05 c0       	rjmp	.+10     	; 0x1ee0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1ed6:	8b e2       	ldi	r24, 0x2B	; 43
    1ed8:	89 83       	std	Y+1, r24	; 0x01
    1eda:	02 c0       	rjmp	.+4      	; 0x1ee0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1edc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ede:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1ee2:	0f 90       	pop	r0
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	cf 91       	pop	r28
    1eec:	df 91       	pop	r29
    1eee:	08 95       	ret

00001ef0 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1ef0:	df 93       	push	r29
    1ef2:	cf 93       	push	r28
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
    1ef8:	2e 97       	sbiw	r28, 0x0e	; 14
    1efa:	0f b6       	in	r0, 0x3f	; 63
    1efc:	f8 94       	cli
    1efe:	de bf       	out	0x3e, r29	; 62
    1f00:	0f be       	out	0x3f, r0	; 63
    1f02:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1f04:	80 e0       	ldi	r24, 0x00	; 0
    1f06:	60 e0       	ldi	r22, 0x00	; 0
    1f08:	41 e0       	ldi	r20, 0x01	; 1
    1f0a:	0e 94 42 0b 	call	0x1684	; 0x1684 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	62 e0       	ldi	r22, 0x02	; 2
    1f12:	41 e0       	ldi	r20, 0x01	; 1
    1f14:	0e 94 42 0b 	call	0x1684	; 0x1684 <GPIO_setupPinDirection>
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	a0 ea       	ldi	r26, 0xA0	; 160
    1f1e:	b1 e4       	ldi	r27, 0x41	; 65
    1f20:	8b 87       	std	Y+11, r24	; 0x0b
    1f22:	9c 87       	std	Y+12, r25	; 0x0c
    1f24:	ad 87       	std	Y+13, r26	; 0x0d
    1f26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	4a ef       	ldi	r20, 0xFA	; 250
    1f36:	54 e4       	ldi	r21, 0x44	; 68
    1f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	8f 83       	std	Y+7, r24	; 0x07
    1f42:	98 87       	std	Y+8, r25	; 0x08
    1f44:	a9 87       	std	Y+9, r26	; 0x09
    1f46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f48:	6f 81       	ldd	r22, Y+7	; 0x07
    1f4a:	78 85       	ldd	r23, Y+8	; 0x08
    1f4c:	89 85       	ldd	r24, Y+9	; 0x09
    1f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	40 e8       	ldi	r20, 0x80	; 128
    1f56:	5f e3       	ldi	r21, 0x3F	; 63
    1f58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f5c:	88 23       	and	r24, r24
    1f5e:	2c f4       	brge	.+10     	; 0x1f6a <LCD_init+0x7a>
		__ticks = 1;
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	9e 83       	std	Y+6, r25	; 0x06
    1f66:	8d 83       	std	Y+5, r24	; 0x05
    1f68:	3f c0       	rjmp	.+126    	; 0x1fe8 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1f6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6c:	78 85       	ldd	r23, Y+8	; 0x08
    1f6e:	89 85       	ldd	r24, Y+9	; 0x09
    1f70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	3f ef       	ldi	r19, 0xFF	; 255
    1f76:	4f e7       	ldi	r20, 0x7F	; 127
    1f78:	57 e4       	ldi	r21, 0x47	; 71
    1f7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f7e:	18 16       	cp	r1, r24
    1f80:	4c f5       	brge	.+82     	; 0x1fd4 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	40 e2       	ldi	r20, 0x20	; 32
    1f90:	51 e4       	ldi	r21, 0x41	; 65
    1f92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f96:	dc 01       	movw	r26, r24
    1f98:	cb 01       	movw	r24, r22
    1f9a:	bc 01       	movw	r22, r24
    1f9c:	cd 01       	movw	r24, r26
    1f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	9e 83       	std	Y+6, r25	; 0x06
    1fa8:	8d 83       	std	Y+5, r24	; 0x05
    1faa:	0f c0       	rjmp	.+30     	; 0x1fca <LCD_init+0xda>
    1fac:	88 ec       	ldi	r24, 0xC8	; 200
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	9c 83       	std	Y+4, r25	; 0x04
    1fb2:	8b 83       	std	Y+3, r24	; 0x03
    1fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb8:	01 97       	sbiw	r24, 0x01	; 1
    1fba:	f1 f7       	brne	.-4      	; 0x1fb8 <LCD_init+0xc8>
    1fbc:	9c 83       	std	Y+4, r25	; 0x04
    1fbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc4:	01 97       	sbiw	r24, 0x01	; 1
    1fc6:	9e 83       	std	Y+6, r25	; 0x06
    1fc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fca:	8d 81       	ldd	r24, Y+5	; 0x05
    1fcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fce:	00 97       	sbiw	r24, 0x00	; 0
    1fd0:	69 f7       	brne	.-38     	; 0x1fac <LCD_init+0xbc>
    1fd2:	14 c0       	rjmp	.+40     	; 0x1ffc <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd6:	78 85       	ldd	r23, Y+8	; 0x08
    1fd8:	89 85       	ldd	r24, Y+9	; 0x09
    1fda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	cb 01       	movw	r24, r22
    1fe4:	9e 83       	std	Y+6, r25	; 0x06
    1fe6:	8d 83       	std	Y+5, r24	; 0x05
    1fe8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fea:	9e 81       	ldd	r25, Y+6	; 0x06
    1fec:	9a 83       	std	Y+2, r25	; 0x02
    1fee:	89 83       	std	Y+1, r24	; 0x01
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
    1ff6:	f1 f7       	brne	.-4      	; 0x1ff4 <LCD_init+0x104>
    1ff8:	9a 83       	std	Y+2, r25	; 0x02
    1ffa:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	6f ef       	ldi	r22, 0xFF	; 255
    2000:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2004:	88 e3       	ldi	r24, 0x38	; 56
    2006:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    200a:	8c e0       	ldi	r24, 0x0C	; 12
    200c:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_sendCommand>
}
    2016:	2e 96       	adiw	r28, 0x0e	; 14
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	cd bf       	out	0x3d, r28	; 61
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	08 95       	ret

00002028 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2028:	df 93       	push	r29
    202a:	cf 93       	push	r28
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
    2030:	e9 97       	sbiw	r28, 0x39	; 57
    2032:	0f b6       	in	r0, 0x3f	; 63
    2034:	f8 94       	cli
    2036:	de bf       	out	0x3e, r29	; 62
    2038:	0f be       	out	0x3f, r0	; 63
    203a:	cd bf       	out	0x3d, r28	; 61
    203c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	60 e0       	ldi	r22, 0x00	; 0
    2042:	40 e0       	ldi	r20, 0x00	; 0
    2044:	0e 94 2d 0c 	call	0x185a	; 0x185a <GPIO_writePin>
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	a0 e8       	ldi	r26, 0x80	; 128
    204e:	bf e3       	ldi	r27, 0x3F	; 63
    2050:	8d ab       	std	Y+53, r24	; 0x35
    2052:	9e ab       	std	Y+54, r25	; 0x36
    2054:	af ab       	std	Y+55, r26	; 0x37
    2056:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2058:	6d a9       	ldd	r22, Y+53	; 0x35
    205a:	7e a9       	ldd	r23, Y+54	; 0x36
    205c:	8f a9       	ldd	r24, Y+55	; 0x37
    205e:	98 ad       	ldd	r25, Y+56	; 0x38
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	4a ef       	ldi	r20, 0xFA	; 250
    2066:	54 e4       	ldi	r21, 0x44	; 68
    2068:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	89 ab       	std	Y+49, r24	; 0x31
    2072:	9a ab       	std	Y+50, r25	; 0x32
    2074:	ab ab       	std	Y+51, r26	; 0x33
    2076:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2078:	69 a9       	ldd	r22, Y+49	; 0x31
    207a:	7a a9       	ldd	r23, Y+50	; 0x32
    207c:	8b a9       	ldd	r24, Y+51	; 0x33
    207e:	9c a9       	ldd	r25, Y+52	; 0x34
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	40 e8       	ldi	r20, 0x80	; 128
    2086:	5f e3       	ldi	r21, 0x3F	; 63
    2088:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    208c:	88 23       	and	r24, r24
    208e:	2c f4       	brge	.+10     	; 0x209a <LCD_sendCommand+0x72>
		__ticks = 1;
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	98 ab       	std	Y+48, r25	; 0x30
    2096:	8f a7       	std	Y+47, r24	; 0x2f
    2098:	3f c0       	rjmp	.+126    	; 0x2118 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    209a:	69 a9       	ldd	r22, Y+49	; 0x31
    209c:	7a a9       	ldd	r23, Y+50	; 0x32
    209e:	8b a9       	ldd	r24, Y+51	; 0x33
    20a0:	9c a9       	ldd	r25, Y+52	; 0x34
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	3f ef       	ldi	r19, 0xFF	; 255
    20a6:	4f e7       	ldi	r20, 0x7F	; 127
    20a8:	57 e4       	ldi	r21, 0x47	; 71
    20aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20ae:	18 16       	cp	r1, r24
    20b0:	4c f5       	brge	.+82     	; 0x2104 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b2:	6d a9       	ldd	r22, Y+53	; 0x35
    20b4:	7e a9       	ldd	r23, Y+54	; 0x36
    20b6:	8f a9       	ldd	r24, Y+55	; 0x37
    20b8:	98 ad       	ldd	r25, Y+56	; 0x38
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	40 e2       	ldi	r20, 0x20	; 32
    20c0:	51 e4       	ldi	r21, 0x41	; 65
    20c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	bc 01       	movw	r22, r24
    20cc:	cd 01       	movw	r24, r26
    20ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	98 ab       	std	Y+48, r25	; 0x30
    20d8:	8f a7       	std	Y+47, r24	; 0x2f
    20da:	0f c0       	rjmp	.+30     	; 0x20fa <LCD_sendCommand+0xd2>
    20dc:	88 ec       	ldi	r24, 0xC8	; 200
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	9e a7       	std	Y+46, r25	; 0x2e
    20e2:	8d a7       	std	Y+45, r24	; 0x2d
    20e4:	8d a5       	ldd	r24, Y+45	; 0x2d
    20e6:	9e a5       	ldd	r25, Y+46	; 0x2e
    20e8:	01 97       	sbiw	r24, 0x01	; 1
    20ea:	f1 f7       	brne	.-4      	; 0x20e8 <LCD_sendCommand+0xc0>
    20ec:	9e a7       	std	Y+46, r25	; 0x2e
    20ee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    20f2:	98 a9       	ldd	r25, Y+48	; 0x30
    20f4:	01 97       	sbiw	r24, 0x01	; 1
    20f6:	98 ab       	std	Y+48, r25	; 0x30
    20f8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    20fc:	98 a9       	ldd	r25, Y+48	; 0x30
    20fe:	00 97       	sbiw	r24, 0x00	; 0
    2100:	69 f7       	brne	.-38     	; 0x20dc <LCD_sendCommand+0xb4>
    2102:	14 c0       	rjmp	.+40     	; 0x212c <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2104:	69 a9       	ldd	r22, Y+49	; 0x31
    2106:	7a a9       	ldd	r23, Y+50	; 0x32
    2108:	8b a9       	ldd	r24, Y+51	; 0x33
    210a:	9c a9       	ldd	r25, Y+52	; 0x34
    210c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	98 ab       	std	Y+48, r25	; 0x30
    2116:	8f a7       	std	Y+47, r24	; 0x2f
    2118:	8f a5       	ldd	r24, Y+47	; 0x2f
    211a:	98 a9       	ldd	r25, Y+48	; 0x30
    211c:	9c a7       	std	Y+44, r25	; 0x2c
    211e:	8b a7       	std	Y+43, r24	; 0x2b
    2120:	8b a5       	ldd	r24, Y+43	; 0x2b
    2122:	9c a5       	ldd	r25, Y+44	; 0x2c
    2124:	01 97       	sbiw	r24, 0x01	; 1
    2126:	f1 f7       	brne	.-4      	; 0x2124 <LCD_sendCommand+0xfc>
    2128:	9c a7       	std	Y+44, r25	; 0x2c
    212a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	62 e0       	ldi	r22, 0x02	; 2
    2130:	41 e0       	ldi	r20, 0x01	; 1
    2132:	0e 94 2d 0c 	call	0x185a	; 0x185a <GPIO_writePin>
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	a0 e8       	ldi	r26, 0x80	; 128
    213c:	bf e3       	ldi	r27, 0x3F	; 63
    213e:	8f a3       	std	Y+39, r24	; 0x27
    2140:	98 a7       	std	Y+40, r25	; 0x28
    2142:	a9 a7       	std	Y+41, r26	; 0x29
    2144:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2146:	6f a1       	ldd	r22, Y+39	; 0x27
    2148:	78 a5       	ldd	r23, Y+40	; 0x28
    214a:	89 a5       	ldd	r24, Y+41	; 0x29
    214c:	9a a5       	ldd	r25, Y+42	; 0x2a
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	4a ef       	ldi	r20, 0xFA	; 250
    2154:	54 e4       	ldi	r21, 0x44	; 68
    2156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	8b a3       	std	Y+35, r24	; 0x23
    2160:	9c a3       	std	Y+36, r25	; 0x24
    2162:	ad a3       	std	Y+37, r26	; 0x25
    2164:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2166:	6b a1       	ldd	r22, Y+35	; 0x23
    2168:	7c a1       	ldd	r23, Y+36	; 0x24
    216a:	8d a1       	ldd	r24, Y+37	; 0x25
    216c:	9e a1       	ldd	r25, Y+38	; 0x26
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	40 e8       	ldi	r20, 0x80	; 128
    2174:	5f e3       	ldi	r21, 0x3F	; 63
    2176:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    217a:	88 23       	and	r24, r24
    217c:	2c f4       	brge	.+10     	; 0x2188 <LCD_sendCommand+0x160>
		__ticks = 1;
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	9a a3       	std	Y+34, r25	; 0x22
    2184:	89 a3       	std	Y+33, r24	; 0x21
    2186:	3f c0       	rjmp	.+126    	; 0x2206 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2188:	6b a1       	ldd	r22, Y+35	; 0x23
    218a:	7c a1       	ldd	r23, Y+36	; 0x24
    218c:	8d a1       	ldd	r24, Y+37	; 0x25
    218e:	9e a1       	ldd	r25, Y+38	; 0x26
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	3f ef       	ldi	r19, 0xFF	; 255
    2194:	4f e7       	ldi	r20, 0x7F	; 127
    2196:	57 e4       	ldi	r21, 0x47	; 71
    2198:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    219c:	18 16       	cp	r1, r24
    219e:	4c f5       	brge	.+82     	; 0x21f2 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a0:	6f a1       	ldd	r22, Y+39	; 0x27
    21a2:	78 a5       	ldd	r23, Y+40	; 0x28
    21a4:	89 a5       	ldd	r24, Y+41	; 0x29
    21a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	40 e2       	ldi	r20, 0x20	; 32
    21ae:	51 e4       	ldi	r21, 0x41	; 65
    21b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	bc 01       	movw	r22, r24
    21ba:	cd 01       	movw	r24, r26
    21bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	9a a3       	std	Y+34, r25	; 0x22
    21c6:	89 a3       	std	Y+33, r24	; 0x21
    21c8:	0f c0       	rjmp	.+30     	; 0x21e8 <LCD_sendCommand+0x1c0>
    21ca:	88 ec       	ldi	r24, 0xC8	; 200
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	98 a3       	std	Y+32, r25	; 0x20
    21d0:	8f 8f       	std	Y+31, r24	; 0x1f
    21d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21d4:	98 a1       	ldd	r25, Y+32	; 0x20
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	f1 f7       	brne	.-4      	; 0x21d6 <LCD_sendCommand+0x1ae>
    21da:	98 a3       	std	Y+32, r25	; 0x20
    21dc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21de:	89 a1       	ldd	r24, Y+33	; 0x21
    21e0:	9a a1       	ldd	r25, Y+34	; 0x22
    21e2:	01 97       	sbiw	r24, 0x01	; 1
    21e4:	9a a3       	std	Y+34, r25	; 0x22
    21e6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e8:	89 a1       	ldd	r24, Y+33	; 0x21
    21ea:	9a a1       	ldd	r25, Y+34	; 0x22
    21ec:	00 97       	sbiw	r24, 0x00	; 0
    21ee:	69 f7       	brne	.-38     	; 0x21ca <LCD_sendCommand+0x1a2>
    21f0:	14 c0       	rjmp	.+40     	; 0x221a <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f2:	6b a1       	ldd	r22, Y+35	; 0x23
    21f4:	7c a1       	ldd	r23, Y+36	; 0x24
    21f6:	8d a1       	ldd	r24, Y+37	; 0x25
    21f8:	9e a1       	ldd	r25, Y+38	; 0x26
    21fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	9a a3       	std	Y+34, r25	; 0x22
    2204:	89 a3       	std	Y+33, r24	; 0x21
    2206:	89 a1       	ldd	r24, Y+33	; 0x21
    2208:	9a a1       	ldd	r25, Y+34	; 0x22
    220a:	9e 8f       	std	Y+30, r25	; 0x1e
    220c:	8d 8f       	std	Y+29, r24	; 0x1d
    220e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2210:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	f1 f7       	brne	.-4      	; 0x2212 <LCD_sendCommand+0x1ea>
    2216:	9e 8f       	std	Y+30, r25	; 0x1e
    2218:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	69 ad       	ldd	r22, Y+57	; 0x39
    221e:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <GPIO_writePort>
    2222:	80 e0       	ldi	r24, 0x00	; 0
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	a0 e8       	ldi	r26, 0x80	; 128
    2228:	bf e3       	ldi	r27, 0x3F	; 63
    222a:	89 8f       	std	Y+25, r24	; 0x19
    222c:	9a 8f       	std	Y+26, r25	; 0x1a
    222e:	ab 8f       	std	Y+27, r26	; 0x1b
    2230:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2232:	69 8d       	ldd	r22, Y+25	; 0x19
    2234:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2236:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2238:	9c 8d       	ldd	r25, Y+28	; 0x1c
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	4a ef       	ldi	r20, 0xFA	; 250
    2240:	54 e4       	ldi	r21, 0x44	; 68
    2242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2246:	dc 01       	movw	r26, r24
    2248:	cb 01       	movw	r24, r22
    224a:	8d 8b       	std	Y+21, r24	; 0x15
    224c:	9e 8b       	std	Y+22, r25	; 0x16
    224e:	af 8b       	std	Y+23, r26	; 0x17
    2250:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2252:	6d 89       	ldd	r22, Y+21	; 0x15
    2254:	7e 89       	ldd	r23, Y+22	; 0x16
    2256:	8f 89       	ldd	r24, Y+23	; 0x17
    2258:	98 8d       	ldd	r25, Y+24	; 0x18
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	40 e8       	ldi	r20, 0x80	; 128
    2260:	5f e3       	ldi	r21, 0x3F	; 63
    2262:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2266:	88 23       	and	r24, r24
    2268:	2c f4       	brge	.+10     	; 0x2274 <LCD_sendCommand+0x24c>
		__ticks = 1;
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	9c 8b       	std	Y+20, r25	; 0x14
    2270:	8b 8b       	std	Y+19, r24	; 0x13
    2272:	3f c0       	rjmp	.+126    	; 0x22f2 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2274:	6d 89       	ldd	r22, Y+21	; 0x15
    2276:	7e 89       	ldd	r23, Y+22	; 0x16
    2278:	8f 89       	ldd	r24, Y+23	; 0x17
    227a:	98 8d       	ldd	r25, Y+24	; 0x18
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	3f ef       	ldi	r19, 0xFF	; 255
    2280:	4f e7       	ldi	r20, 0x7F	; 127
    2282:	57 e4       	ldi	r21, 0x47	; 71
    2284:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2288:	18 16       	cp	r1, r24
    228a:	4c f5       	brge	.+82     	; 0x22de <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    228c:	69 8d       	ldd	r22, Y+25	; 0x19
    228e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2290:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2292:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 e2       	ldi	r20, 0x20	; 32
    229a:	51 e4       	ldi	r21, 0x41	; 65
    229c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	bc 01       	movw	r22, r24
    22a6:	cd 01       	movw	r24, r26
    22a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	9c 8b       	std	Y+20, r25	; 0x14
    22b2:	8b 8b       	std	Y+19, r24	; 0x13
    22b4:	0f c0       	rjmp	.+30     	; 0x22d4 <LCD_sendCommand+0x2ac>
    22b6:	88 ec       	ldi	r24, 0xC8	; 200
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	9a 8b       	std	Y+18, r25	; 0x12
    22bc:	89 8b       	std	Y+17, r24	; 0x11
    22be:	89 89       	ldd	r24, Y+17	; 0x11
    22c0:	9a 89       	ldd	r25, Y+18	; 0x12
    22c2:	01 97       	sbiw	r24, 0x01	; 1
    22c4:	f1 f7       	brne	.-4      	; 0x22c2 <LCD_sendCommand+0x29a>
    22c6:	9a 8b       	std	Y+18, r25	; 0x12
    22c8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ca:	8b 89       	ldd	r24, Y+19	; 0x13
    22cc:	9c 89       	ldd	r25, Y+20	; 0x14
    22ce:	01 97       	sbiw	r24, 0x01	; 1
    22d0:	9c 8b       	std	Y+20, r25	; 0x14
    22d2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d4:	8b 89       	ldd	r24, Y+19	; 0x13
    22d6:	9c 89       	ldd	r25, Y+20	; 0x14
    22d8:	00 97       	sbiw	r24, 0x00	; 0
    22da:	69 f7       	brne	.-38     	; 0x22b6 <LCD_sendCommand+0x28e>
    22dc:	14 c0       	rjmp	.+40     	; 0x2306 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22de:	6d 89       	ldd	r22, Y+21	; 0x15
    22e0:	7e 89       	ldd	r23, Y+22	; 0x16
    22e2:	8f 89       	ldd	r24, Y+23	; 0x17
    22e4:	98 8d       	ldd	r25, Y+24	; 0x18
    22e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	9c 8b       	std	Y+20, r25	; 0x14
    22f0:	8b 8b       	std	Y+19, r24	; 0x13
    22f2:	8b 89       	ldd	r24, Y+19	; 0x13
    22f4:	9c 89       	ldd	r25, Y+20	; 0x14
    22f6:	98 8b       	std	Y+16, r25	; 0x10
    22f8:	8f 87       	std	Y+15, r24	; 0x0f
    22fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    22fc:	98 89       	ldd	r25, Y+16	; 0x10
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	f1 f7       	brne	.-4      	; 0x22fe <LCD_sendCommand+0x2d6>
    2302:	98 8b       	std	Y+16, r25	; 0x10
    2304:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	62 e0       	ldi	r22, 0x02	; 2
    230a:	40 e0       	ldi	r20, 0x00	; 0
    230c:	0e 94 2d 0c 	call	0x185a	; 0x185a <GPIO_writePin>
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	a0 e8       	ldi	r26, 0x80	; 128
    2316:	bf e3       	ldi	r27, 0x3F	; 63
    2318:	8b 87       	std	Y+11, r24	; 0x0b
    231a:	9c 87       	std	Y+12, r25	; 0x0c
    231c:	ad 87       	std	Y+13, r26	; 0x0d
    231e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2320:	6b 85       	ldd	r22, Y+11	; 0x0b
    2322:	7c 85       	ldd	r23, Y+12	; 0x0c
    2324:	8d 85       	ldd	r24, Y+13	; 0x0d
    2326:	9e 85       	ldd	r25, Y+14	; 0x0e
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	4a ef       	ldi	r20, 0xFA	; 250
    232e:	54 e4       	ldi	r21, 0x44	; 68
    2330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	8f 83       	std	Y+7, r24	; 0x07
    233a:	98 87       	std	Y+8, r25	; 0x08
    233c:	a9 87       	std	Y+9, r26	; 0x09
    233e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2340:	6f 81       	ldd	r22, Y+7	; 0x07
    2342:	78 85       	ldd	r23, Y+8	; 0x08
    2344:	89 85       	ldd	r24, Y+9	; 0x09
    2346:	9a 85       	ldd	r25, Y+10	; 0x0a
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	40 e8       	ldi	r20, 0x80	; 128
    234e:	5f e3       	ldi	r21, 0x3F	; 63
    2350:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2354:	88 23       	and	r24, r24
    2356:	2c f4       	brge	.+10     	; 0x2362 <LCD_sendCommand+0x33a>
		__ticks = 1;
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	9e 83       	std	Y+6, r25	; 0x06
    235e:	8d 83       	std	Y+5, r24	; 0x05
    2360:	3f c0       	rjmp	.+126    	; 0x23e0 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2362:	6f 81       	ldd	r22, Y+7	; 0x07
    2364:	78 85       	ldd	r23, Y+8	; 0x08
    2366:	89 85       	ldd	r24, Y+9	; 0x09
    2368:	9a 85       	ldd	r25, Y+10	; 0x0a
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	3f ef       	ldi	r19, 0xFF	; 255
    236e:	4f e7       	ldi	r20, 0x7F	; 127
    2370:	57 e4       	ldi	r21, 0x47	; 71
    2372:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2376:	18 16       	cp	r1, r24
    2378:	4c f5       	brge	.+82     	; 0x23cc <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    237a:	6b 85       	ldd	r22, Y+11	; 0x0b
    237c:	7c 85       	ldd	r23, Y+12	; 0x0c
    237e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2380:	9e 85       	ldd	r25, Y+14	; 0x0e
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	40 e2       	ldi	r20, 0x20	; 32
    2388:	51 e4       	ldi	r21, 0x41	; 65
    238a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	bc 01       	movw	r22, r24
    2394:	cd 01       	movw	r24, r26
    2396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	9e 83       	std	Y+6, r25	; 0x06
    23a0:	8d 83       	std	Y+5, r24	; 0x05
    23a2:	0f c0       	rjmp	.+30     	; 0x23c2 <LCD_sendCommand+0x39a>
    23a4:	88 ec       	ldi	r24, 0xC8	; 200
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	9c 83       	std	Y+4, r25	; 0x04
    23aa:	8b 83       	std	Y+3, r24	; 0x03
    23ac:	8b 81       	ldd	r24, Y+3	; 0x03
    23ae:	9c 81       	ldd	r25, Y+4	; 0x04
    23b0:	01 97       	sbiw	r24, 0x01	; 1
    23b2:	f1 f7       	brne	.-4      	; 0x23b0 <LCD_sendCommand+0x388>
    23b4:	9c 83       	std	Y+4, r25	; 0x04
    23b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ba:	9e 81       	ldd	r25, Y+6	; 0x06
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	9e 83       	std	Y+6, r25	; 0x06
    23c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c2:	8d 81       	ldd	r24, Y+5	; 0x05
    23c4:	9e 81       	ldd	r25, Y+6	; 0x06
    23c6:	00 97       	sbiw	r24, 0x00	; 0
    23c8:	69 f7       	brne	.-38     	; 0x23a4 <LCD_sendCommand+0x37c>
    23ca:	14 c0       	rjmp	.+40     	; 0x23f4 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23cc:	6f 81       	ldd	r22, Y+7	; 0x07
    23ce:	78 85       	ldd	r23, Y+8	; 0x08
    23d0:	89 85       	ldd	r24, Y+9	; 0x09
    23d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	9e 83       	std	Y+6, r25	; 0x06
    23de:	8d 83       	std	Y+5, r24	; 0x05
    23e0:	8d 81       	ldd	r24, Y+5	; 0x05
    23e2:	9e 81       	ldd	r25, Y+6	; 0x06
    23e4:	9a 83       	std	Y+2, r25	; 0x02
    23e6:	89 83       	std	Y+1, r24	; 0x01
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	9a 81       	ldd	r25, Y+2	; 0x02
    23ec:	01 97       	sbiw	r24, 0x01	; 1
    23ee:	f1 f7       	brne	.-4      	; 0x23ec <LCD_sendCommand+0x3c4>
    23f0:	9a 83       	std	Y+2, r25	; 0x02
    23f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    23f4:	e9 96       	adiw	r28, 0x39	; 57
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	f8 94       	cli
    23fa:	de bf       	out	0x3e, r29	; 62
    23fc:	0f be       	out	0x3f, r0	; 63
    23fe:	cd bf       	out	0x3d, r28	; 61
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	08 95       	ret

00002406 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2406:	df 93       	push	r29
    2408:	cf 93       	push	r28
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    240e:	e9 97       	sbiw	r28, 0x39	; 57
    2410:	0f b6       	in	r0, 0x3f	; 63
    2412:	f8 94       	cli
    2414:	de bf       	out	0x3e, r29	; 62
    2416:	0f be       	out	0x3f, r0	; 63
    2418:	cd bf       	out	0x3d, r28	; 61
    241a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	60 e0       	ldi	r22, 0x00	; 0
    2420:	41 e0       	ldi	r20, 0x01	; 1
    2422:	0e 94 2d 0c 	call	0x185a	; 0x185a <GPIO_writePin>
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	a0 e8       	ldi	r26, 0x80	; 128
    242c:	bf e3       	ldi	r27, 0x3F	; 63
    242e:	8d ab       	std	Y+53, r24	; 0x35
    2430:	9e ab       	std	Y+54, r25	; 0x36
    2432:	af ab       	std	Y+55, r26	; 0x37
    2434:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2436:	6d a9       	ldd	r22, Y+53	; 0x35
    2438:	7e a9       	ldd	r23, Y+54	; 0x36
    243a:	8f a9       	ldd	r24, Y+55	; 0x37
    243c:	98 ad       	ldd	r25, Y+56	; 0x38
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	4a ef       	ldi	r20, 0xFA	; 250
    2444:	54 e4       	ldi	r21, 0x44	; 68
    2446:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	89 ab       	std	Y+49, r24	; 0x31
    2450:	9a ab       	std	Y+50, r25	; 0x32
    2452:	ab ab       	std	Y+51, r26	; 0x33
    2454:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2456:	69 a9       	ldd	r22, Y+49	; 0x31
    2458:	7a a9       	ldd	r23, Y+50	; 0x32
    245a:	8b a9       	ldd	r24, Y+51	; 0x33
    245c:	9c a9       	ldd	r25, Y+52	; 0x34
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	40 e8       	ldi	r20, 0x80	; 128
    2464:	5f e3       	ldi	r21, 0x3F	; 63
    2466:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    246a:	88 23       	and	r24, r24
    246c:	2c f4       	brge	.+10     	; 0x2478 <LCD_displayCharacter+0x72>
		__ticks = 1;
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	98 ab       	std	Y+48, r25	; 0x30
    2474:	8f a7       	std	Y+47, r24	; 0x2f
    2476:	3f c0       	rjmp	.+126    	; 0x24f6 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2478:	69 a9       	ldd	r22, Y+49	; 0x31
    247a:	7a a9       	ldd	r23, Y+50	; 0x32
    247c:	8b a9       	ldd	r24, Y+51	; 0x33
    247e:	9c a9       	ldd	r25, Y+52	; 0x34
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	3f ef       	ldi	r19, 0xFF	; 255
    2484:	4f e7       	ldi	r20, 0x7F	; 127
    2486:	57 e4       	ldi	r21, 0x47	; 71
    2488:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    248c:	18 16       	cp	r1, r24
    248e:	4c f5       	brge	.+82     	; 0x24e2 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2490:	6d a9       	ldd	r22, Y+53	; 0x35
    2492:	7e a9       	ldd	r23, Y+54	; 0x36
    2494:	8f a9       	ldd	r24, Y+55	; 0x37
    2496:	98 ad       	ldd	r25, Y+56	; 0x38
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	40 e2       	ldi	r20, 0x20	; 32
    249e:	51 e4       	ldi	r21, 0x41	; 65
    24a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	bc 01       	movw	r22, r24
    24aa:	cd 01       	movw	r24, r26
    24ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	98 ab       	std	Y+48, r25	; 0x30
    24b6:	8f a7       	std	Y+47, r24	; 0x2f
    24b8:	0f c0       	rjmp	.+30     	; 0x24d8 <LCD_displayCharacter+0xd2>
    24ba:	88 ec       	ldi	r24, 0xC8	; 200
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	9e a7       	std	Y+46, r25	; 0x2e
    24c0:	8d a7       	std	Y+45, r24	; 0x2d
    24c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    24c4:	9e a5       	ldd	r25, Y+46	; 0x2e
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	f1 f7       	brne	.-4      	; 0x24c6 <LCD_displayCharacter+0xc0>
    24ca:	9e a7       	std	Y+46, r25	; 0x2e
    24cc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    24d0:	98 a9       	ldd	r25, Y+48	; 0x30
    24d2:	01 97       	sbiw	r24, 0x01	; 1
    24d4:	98 ab       	std	Y+48, r25	; 0x30
    24d6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    24da:	98 a9       	ldd	r25, Y+48	; 0x30
    24dc:	00 97       	sbiw	r24, 0x00	; 0
    24de:	69 f7       	brne	.-38     	; 0x24ba <LCD_displayCharacter+0xb4>
    24e0:	14 c0       	rjmp	.+40     	; 0x250a <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e2:	69 a9       	ldd	r22, Y+49	; 0x31
    24e4:	7a a9       	ldd	r23, Y+50	; 0x32
    24e6:	8b a9       	ldd	r24, Y+51	; 0x33
    24e8:	9c a9       	ldd	r25, Y+52	; 0x34
    24ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	98 ab       	std	Y+48, r25	; 0x30
    24f4:	8f a7       	std	Y+47, r24	; 0x2f
    24f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    24f8:	98 a9       	ldd	r25, Y+48	; 0x30
    24fa:	9c a7       	std	Y+44, r25	; 0x2c
    24fc:	8b a7       	std	Y+43, r24	; 0x2b
    24fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2500:	9c a5       	ldd	r25, Y+44	; 0x2c
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	f1 f7       	brne	.-4      	; 0x2502 <LCD_displayCharacter+0xfc>
    2506:	9c a7       	std	Y+44, r25	; 0x2c
    2508:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    250a:	80 e0       	ldi	r24, 0x00	; 0
    250c:	62 e0       	ldi	r22, 0x02	; 2
    250e:	41 e0       	ldi	r20, 0x01	; 1
    2510:	0e 94 2d 0c 	call	0x185a	; 0x185a <GPIO_writePin>
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	a0 e8       	ldi	r26, 0x80	; 128
    251a:	bf e3       	ldi	r27, 0x3F	; 63
    251c:	8f a3       	std	Y+39, r24	; 0x27
    251e:	98 a7       	std	Y+40, r25	; 0x28
    2520:	a9 a7       	std	Y+41, r26	; 0x29
    2522:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2524:	6f a1       	ldd	r22, Y+39	; 0x27
    2526:	78 a5       	ldd	r23, Y+40	; 0x28
    2528:	89 a5       	ldd	r24, Y+41	; 0x29
    252a:	9a a5       	ldd	r25, Y+42	; 0x2a
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	4a ef       	ldi	r20, 0xFA	; 250
    2532:	54 e4       	ldi	r21, 0x44	; 68
    2534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	8b a3       	std	Y+35, r24	; 0x23
    253e:	9c a3       	std	Y+36, r25	; 0x24
    2540:	ad a3       	std	Y+37, r26	; 0x25
    2542:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2544:	6b a1       	ldd	r22, Y+35	; 0x23
    2546:	7c a1       	ldd	r23, Y+36	; 0x24
    2548:	8d a1       	ldd	r24, Y+37	; 0x25
    254a:	9e a1       	ldd	r25, Y+38	; 0x26
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	40 e8       	ldi	r20, 0x80	; 128
    2552:	5f e3       	ldi	r21, 0x3F	; 63
    2554:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2558:	88 23       	and	r24, r24
    255a:	2c f4       	brge	.+10     	; 0x2566 <LCD_displayCharacter+0x160>
		__ticks = 1;
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	9a a3       	std	Y+34, r25	; 0x22
    2562:	89 a3       	std	Y+33, r24	; 0x21
    2564:	3f c0       	rjmp	.+126    	; 0x25e4 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2566:	6b a1       	ldd	r22, Y+35	; 0x23
    2568:	7c a1       	ldd	r23, Y+36	; 0x24
    256a:	8d a1       	ldd	r24, Y+37	; 0x25
    256c:	9e a1       	ldd	r25, Y+38	; 0x26
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	3f ef       	ldi	r19, 0xFF	; 255
    2572:	4f e7       	ldi	r20, 0x7F	; 127
    2574:	57 e4       	ldi	r21, 0x47	; 71
    2576:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    257a:	18 16       	cp	r1, r24
    257c:	4c f5       	brge	.+82     	; 0x25d0 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    257e:	6f a1       	ldd	r22, Y+39	; 0x27
    2580:	78 a5       	ldd	r23, Y+40	; 0x28
    2582:	89 a5       	ldd	r24, Y+41	; 0x29
    2584:	9a a5       	ldd	r25, Y+42	; 0x2a
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	40 e2       	ldi	r20, 0x20	; 32
    258c:	51 e4       	ldi	r21, 0x41	; 65
    258e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	bc 01       	movw	r22, r24
    2598:	cd 01       	movw	r24, r26
    259a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259e:	dc 01       	movw	r26, r24
    25a0:	cb 01       	movw	r24, r22
    25a2:	9a a3       	std	Y+34, r25	; 0x22
    25a4:	89 a3       	std	Y+33, r24	; 0x21
    25a6:	0f c0       	rjmp	.+30     	; 0x25c6 <LCD_displayCharacter+0x1c0>
    25a8:	88 ec       	ldi	r24, 0xC8	; 200
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	98 a3       	std	Y+32, r25	; 0x20
    25ae:	8f 8f       	std	Y+31, r24	; 0x1f
    25b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25b2:	98 a1       	ldd	r25, Y+32	; 0x20
    25b4:	01 97       	sbiw	r24, 0x01	; 1
    25b6:	f1 f7       	brne	.-4      	; 0x25b4 <LCD_displayCharacter+0x1ae>
    25b8:	98 a3       	std	Y+32, r25	; 0x20
    25ba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25bc:	89 a1       	ldd	r24, Y+33	; 0x21
    25be:	9a a1       	ldd	r25, Y+34	; 0x22
    25c0:	01 97       	sbiw	r24, 0x01	; 1
    25c2:	9a a3       	std	Y+34, r25	; 0x22
    25c4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c6:	89 a1       	ldd	r24, Y+33	; 0x21
    25c8:	9a a1       	ldd	r25, Y+34	; 0x22
    25ca:	00 97       	sbiw	r24, 0x00	; 0
    25cc:	69 f7       	brne	.-38     	; 0x25a8 <LCD_displayCharacter+0x1a2>
    25ce:	14 c0       	rjmp	.+40     	; 0x25f8 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d0:	6b a1       	ldd	r22, Y+35	; 0x23
    25d2:	7c a1       	ldd	r23, Y+36	; 0x24
    25d4:	8d a1       	ldd	r24, Y+37	; 0x25
    25d6:	9e a1       	ldd	r25, Y+38	; 0x26
    25d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	9a a3       	std	Y+34, r25	; 0x22
    25e2:	89 a3       	std	Y+33, r24	; 0x21
    25e4:	89 a1       	ldd	r24, Y+33	; 0x21
    25e6:	9a a1       	ldd	r25, Y+34	; 0x22
    25e8:	9e 8f       	std	Y+30, r25	; 0x1e
    25ea:	8d 8f       	std	Y+29, r24	; 0x1d
    25ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25f0:	01 97       	sbiw	r24, 0x01	; 1
    25f2:	f1 f7       	brne	.-4      	; 0x25f0 <LCD_displayCharacter+0x1ea>
    25f4:	9e 8f       	std	Y+30, r25	; 0x1e
    25f6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	69 ad       	ldd	r22, Y+57	; 0x39
    25fc:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <GPIO_writePort>
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	a0 e8       	ldi	r26, 0x80	; 128
    2606:	bf e3       	ldi	r27, 0x3F	; 63
    2608:	89 8f       	std	Y+25, r24	; 0x19
    260a:	9a 8f       	std	Y+26, r25	; 0x1a
    260c:	ab 8f       	std	Y+27, r26	; 0x1b
    260e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2610:	69 8d       	ldd	r22, Y+25	; 0x19
    2612:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2614:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2616:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	4a ef       	ldi	r20, 0xFA	; 250
    261e:	54 e4       	ldi	r21, 0x44	; 68
    2620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	8d 8b       	std	Y+21, r24	; 0x15
    262a:	9e 8b       	std	Y+22, r25	; 0x16
    262c:	af 8b       	std	Y+23, r26	; 0x17
    262e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2630:	6d 89       	ldd	r22, Y+21	; 0x15
    2632:	7e 89       	ldd	r23, Y+22	; 0x16
    2634:	8f 89       	ldd	r24, Y+23	; 0x17
    2636:	98 8d       	ldd	r25, Y+24	; 0x18
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	40 e8       	ldi	r20, 0x80	; 128
    263e:	5f e3       	ldi	r21, 0x3F	; 63
    2640:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2644:	88 23       	and	r24, r24
    2646:	2c f4       	brge	.+10     	; 0x2652 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	9c 8b       	std	Y+20, r25	; 0x14
    264e:	8b 8b       	std	Y+19, r24	; 0x13
    2650:	3f c0       	rjmp	.+126    	; 0x26d0 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2652:	6d 89       	ldd	r22, Y+21	; 0x15
    2654:	7e 89       	ldd	r23, Y+22	; 0x16
    2656:	8f 89       	ldd	r24, Y+23	; 0x17
    2658:	98 8d       	ldd	r25, Y+24	; 0x18
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	3f ef       	ldi	r19, 0xFF	; 255
    265e:	4f e7       	ldi	r20, 0x7F	; 127
    2660:	57 e4       	ldi	r21, 0x47	; 71
    2662:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2666:	18 16       	cp	r1, r24
    2668:	4c f5       	brge	.+82     	; 0x26bc <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266a:	69 8d       	ldd	r22, Y+25	; 0x19
    266c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    266e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2670:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	40 e2       	ldi	r20, 0x20	; 32
    2678:	51 e4       	ldi	r21, 0x41	; 65
    267a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	bc 01       	movw	r22, r24
    2684:	cd 01       	movw	r24, r26
    2686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268a:	dc 01       	movw	r26, r24
    268c:	cb 01       	movw	r24, r22
    268e:	9c 8b       	std	Y+20, r25	; 0x14
    2690:	8b 8b       	std	Y+19, r24	; 0x13
    2692:	0f c0       	rjmp	.+30     	; 0x26b2 <LCD_displayCharacter+0x2ac>
    2694:	88 ec       	ldi	r24, 0xC8	; 200
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	9a 8b       	std	Y+18, r25	; 0x12
    269a:	89 8b       	std	Y+17, r24	; 0x11
    269c:	89 89       	ldd	r24, Y+17	; 0x11
    269e:	9a 89       	ldd	r25, Y+18	; 0x12
    26a0:	01 97       	sbiw	r24, 0x01	; 1
    26a2:	f1 f7       	brne	.-4      	; 0x26a0 <LCD_displayCharacter+0x29a>
    26a4:	9a 8b       	std	Y+18, r25	; 0x12
    26a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a8:	8b 89       	ldd	r24, Y+19	; 0x13
    26aa:	9c 89       	ldd	r25, Y+20	; 0x14
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	9c 8b       	std	Y+20, r25	; 0x14
    26b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b2:	8b 89       	ldd	r24, Y+19	; 0x13
    26b4:	9c 89       	ldd	r25, Y+20	; 0x14
    26b6:	00 97       	sbiw	r24, 0x00	; 0
    26b8:	69 f7       	brne	.-38     	; 0x2694 <LCD_displayCharacter+0x28e>
    26ba:	14 c0       	rjmp	.+40     	; 0x26e4 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26bc:	6d 89       	ldd	r22, Y+21	; 0x15
    26be:	7e 89       	ldd	r23, Y+22	; 0x16
    26c0:	8f 89       	ldd	r24, Y+23	; 0x17
    26c2:	98 8d       	ldd	r25, Y+24	; 0x18
    26c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	9c 8b       	std	Y+20, r25	; 0x14
    26ce:	8b 8b       	std	Y+19, r24	; 0x13
    26d0:	8b 89       	ldd	r24, Y+19	; 0x13
    26d2:	9c 89       	ldd	r25, Y+20	; 0x14
    26d4:	98 8b       	std	Y+16, r25	; 0x10
    26d6:	8f 87       	std	Y+15, r24	; 0x0f
    26d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    26da:	98 89       	ldd	r25, Y+16	; 0x10
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	f1 f7       	brne	.-4      	; 0x26dc <LCD_displayCharacter+0x2d6>
    26e0:	98 8b       	std	Y+16, r25	; 0x10
    26e2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	62 e0       	ldi	r22, 0x02	; 2
    26e8:	40 e0       	ldi	r20, 0x00	; 0
    26ea:	0e 94 2d 0c 	call	0x185a	; 0x185a <GPIO_writePin>
    26ee:	80 e0       	ldi	r24, 0x00	; 0
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	a0 e8       	ldi	r26, 0x80	; 128
    26f4:	bf e3       	ldi	r27, 0x3F	; 63
    26f6:	8b 87       	std	Y+11, r24	; 0x0b
    26f8:	9c 87       	std	Y+12, r25	; 0x0c
    26fa:	ad 87       	std	Y+13, r26	; 0x0d
    26fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2700:	7c 85       	ldd	r23, Y+12	; 0x0c
    2702:	8d 85       	ldd	r24, Y+13	; 0x0d
    2704:	9e 85       	ldd	r25, Y+14	; 0x0e
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	4a ef       	ldi	r20, 0xFA	; 250
    270c:	54 e4       	ldi	r21, 0x44	; 68
    270e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2712:	dc 01       	movw	r26, r24
    2714:	cb 01       	movw	r24, r22
    2716:	8f 83       	std	Y+7, r24	; 0x07
    2718:	98 87       	std	Y+8, r25	; 0x08
    271a:	a9 87       	std	Y+9, r26	; 0x09
    271c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    271e:	6f 81       	ldd	r22, Y+7	; 0x07
    2720:	78 85       	ldd	r23, Y+8	; 0x08
    2722:	89 85       	ldd	r24, Y+9	; 0x09
    2724:	9a 85       	ldd	r25, Y+10	; 0x0a
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	40 e8       	ldi	r20, 0x80	; 128
    272c:	5f e3       	ldi	r21, 0x3F	; 63
    272e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2732:	88 23       	and	r24, r24
    2734:	2c f4       	brge	.+10     	; 0x2740 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	9e 83       	std	Y+6, r25	; 0x06
    273c:	8d 83       	std	Y+5, r24	; 0x05
    273e:	3f c0       	rjmp	.+126    	; 0x27be <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2740:	6f 81       	ldd	r22, Y+7	; 0x07
    2742:	78 85       	ldd	r23, Y+8	; 0x08
    2744:	89 85       	ldd	r24, Y+9	; 0x09
    2746:	9a 85       	ldd	r25, Y+10	; 0x0a
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	3f ef       	ldi	r19, 0xFF	; 255
    274c:	4f e7       	ldi	r20, 0x7F	; 127
    274e:	57 e4       	ldi	r21, 0x47	; 71
    2750:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2754:	18 16       	cp	r1, r24
    2756:	4c f5       	brge	.+82     	; 0x27aa <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2758:	6b 85       	ldd	r22, Y+11	; 0x0b
    275a:	7c 85       	ldd	r23, Y+12	; 0x0c
    275c:	8d 85       	ldd	r24, Y+13	; 0x0d
    275e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	40 e2       	ldi	r20, 0x20	; 32
    2766:	51 e4       	ldi	r21, 0x41	; 65
    2768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	bc 01       	movw	r22, r24
    2772:	cd 01       	movw	r24, r26
    2774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	9e 83       	std	Y+6, r25	; 0x06
    277e:	8d 83       	std	Y+5, r24	; 0x05
    2780:	0f c0       	rjmp	.+30     	; 0x27a0 <LCD_displayCharacter+0x39a>
    2782:	88 ec       	ldi	r24, 0xC8	; 200
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	9c 83       	std	Y+4, r25	; 0x04
    2788:	8b 83       	std	Y+3, r24	; 0x03
    278a:	8b 81       	ldd	r24, Y+3	; 0x03
    278c:	9c 81       	ldd	r25, Y+4	; 0x04
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	f1 f7       	brne	.-4      	; 0x278e <LCD_displayCharacter+0x388>
    2792:	9c 83       	std	Y+4, r25	; 0x04
    2794:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2796:	8d 81       	ldd	r24, Y+5	; 0x05
    2798:	9e 81       	ldd	r25, Y+6	; 0x06
    279a:	01 97       	sbiw	r24, 0x01	; 1
    279c:	9e 83       	std	Y+6, r25	; 0x06
    279e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a0:	8d 81       	ldd	r24, Y+5	; 0x05
    27a2:	9e 81       	ldd	r25, Y+6	; 0x06
    27a4:	00 97       	sbiw	r24, 0x00	; 0
    27a6:	69 f7       	brne	.-38     	; 0x2782 <LCD_displayCharacter+0x37c>
    27a8:	14 c0       	rjmp	.+40     	; 0x27d2 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27aa:	6f 81       	ldd	r22, Y+7	; 0x07
    27ac:	78 85       	ldd	r23, Y+8	; 0x08
    27ae:	89 85       	ldd	r24, Y+9	; 0x09
    27b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b6:	dc 01       	movw	r26, r24
    27b8:	cb 01       	movw	r24, r22
    27ba:	9e 83       	std	Y+6, r25	; 0x06
    27bc:	8d 83       	std	Y+5, r24	; 0x05
    27be:	8d 81       	ldd	r24, Y+5	; 0x05
    27c0:	9e 81       	ldd	r25, Y+6	; 0x06
    27c2:	9a 83       	std	Y+2, r25	; 0x02
    27c4:	89 83       	std	Y+1, r24	; 0x01
    27c6:	89 81       	ldd	r24, Y+1	; 0x01
    27c8:	9a 81       	ldd	r25, Y+2	; 0x02
    27ca:	01 97       	sbiw	r24, 0x01	; 1
    27cc:	f1 f7       	brne	.-4      	; 0x27ca <LCD_displayCharacter+0x3c4>
    27ce:	9a 83       	std	Y+2, r25	; 0x02
    27d0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    27d2:	e9 96       	adiw	r28, 0x39	; 57
    27d4:	0f b6       	in	r0, 0x3f	; 63
    27d6:	f8 94       	cli
    27d8:	de bf       	out	0x3e, r29	; 62
    27da:	0f be       	out	0x3f, r0	; 63
    27dc:	cd bf       	out	0x3d, r28	; 61
    27de:	cf 91       	pop	r28
    27e0:	df 91       	pop	r29
    27e2:	08 95       	ret

000027e4 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    27e4:	df 93       	push	r29
    27e6:	cf 93       	push	r28
    27e8:	00 d0       	rcall	.+0      	; 0x27ea <LCD_displayString+0x6>
    27ea:	0f 92       	push	r0
    27ec:	cd b7       	in	r28, 0x3d	; 61
    27ee:	de b7       	in	r29, 0x3e	; 62
    27f0:	9b 83       	std	Y+3, r25	; 0x03
    27f2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    27f4:	19 82       	std	Y+1, r1	; 0x01
    27f6:	0e c0       	rjmp	.+28     	; 0x2814 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
    27fa:	28 2f       	mov	r18, r24
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2800:	9b 81       	ldd	r25, Y+3	; 0x03
    2802:	fc 01       	movw	r30, r24
    2804:	e2 0f       	add	r30, r18
    2806:	f3 1f       	adc	r31, r19
    2808:	80 81       	ld	r24, Z
    280a:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_displayCharacter>
		i++;
    280e:	89 81       	ldd	r24, Y+1	; 0x01
    2810:	8f 5f       	subi	r24, 0xFF	; 255
    2812:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2814:	89 81       	ldd	r24, Y+1	; 0x01
    2816:	28 2f       	mov	r18, r24
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	8a 81       	ldd	r24, Y+2	; 0x02
    281c:	9b 81       	ldd	r25, Y+3	; 0x03
    281e:	fc 01       	movw	r30, r24
    2820:	e2 0f       	add	r30, r18
    2822:	f3 1f       	adc	r31, r19
    2824:	80 81       	ld	r24, Z
    2826:	88 23       	and	r24, r24
    2828:	39 f7       	brne	.-50     	; 0x27f8 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    282a:	0f 90       	pop	r0
    282c:	0f 90       	pop	r0
    282e:	0f 90       	pop	r0
    2830:	cf 91       	pop	r28
    2832:	df 91       	pop	r29
    2834:	08 95       	ret

00002836 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2836:	df 93       	push	r29
    2838:	cf 93       	push	r28
    283a:	00 d0       	rcall	.+0      	; 0x283c <LCD_moveCursor+0x6>
    283c:	00 d0       	rcall	.+0      	; 0x283e <LCD_moveCursor+0x8>
    283e:	0f 92       	push	r0
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
    2844:	8a 83       	std	Y+2, r24	; 0x02
    2846:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2848:	8a 81       	ldd	r24, Y+2	; 0x02
    284a:	28 2f       	mov	r18, r24
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	3d 83       	std	Y+5, r19	; 0x05
    2850:	2c 83       	std	Y+4, r18	; 0x04
    2852:	8c 81       	ldd	r24, Y+4	; 0x04
    2854:	9d 81       	ldd	r25, Y+5	; 0x05
    2856:	81 30       	cpi	r24, 0x01	; 1
    2858:	91 05       	cpc	r25, r1
    285a:	c1 f0       	breq	.+48     	; 0x288c <LCD_moveCursor+0x56>
    285c:	2c 81       	ldd	r18, Y+4	; 0x04
    285e:	3d 81       	ldd	r19, Y+5	; 0x05
    2860:	22 30       	cpi	r18, 0x02	; 2
    2862:	31 05       	cpc	r19, r1
    2864:	2c f4       	brge	.+10     	; 0x2870 <LCD_moveCursor+0x3a>
    2866:	8c 81       	ldd	r24, Y+4	; 0x04
    2868:	9d 81       	ldd	r25, Y+5	; 0x05
    286a:	00 97       	sbiw	r24, 0x00	; 0
    286c:	61 f0       	breq	.+24     	; 0x2886 <LCD_moveCursor+0x50>
    286e:	19 c0       	rjmp	.+50     	; 0x28a2 <LCD_moveCursor+0x6c>
    2870:	2c 81       	ldd	r18, Y+4	; 0x04
    2872:	3d 81       	ldd	r19, Y+5	; 0x05
    2874:	22 30       	cpi	r18, 0x02	; 2
    2876:	31 05       	cpc	r19, r1
    2878:	69 f0       	breq	.+26     	; 0x2894 <LCD_moveCursor+0x5e>
    287a:	8c 81       	ldd	r24, Y+4	; 0x04
    287c:	9d 81       	ldd	r25, Y+5	; 0x05
    287e:	83 30       	cpi	r24, 0x03	; 3
    2880:	91 05       	cpc	r25, r1
    2882:	61 f0       	breq	.+24     	; 0x289c <LCD_moveCursor+0x66>
    2884:	0e c0       	rjmp	.+28     	; 0x28a2 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2886:	8b 81       	ldd	r24, Y+3	; 0x03
    2888:	89 83       	std	Y+1, r24	; 0x01
    288a:	0b c0       	rjmp	.+22     	; 0x28a2 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    288c:	8b 81       	ldd	r24, Y+3	; 0x03
    288e:	80 5c       	subi	r24, 0xC0	; 192
    2890:	89 83       	std	Y+1, r24	; 0x01
    2892:	07 c0       	rjmp	.+14     	; 0x28a2 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2894:	8b 81       	ldd	r24, Y+3	; 0x03
    2896:	80 5f       	subi	r24, 0xF0	; 240
    2898:	89 83       	std	Y+1, r24	; 0x01
    289a:	03 c0       	rjmp	.+6      	; 0x28a2 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    289c:	8b 81       	ldd	r24, Y+3	; 0x03
    289e:	80 5b       	subi	r24, 0xB0	; 176
    28a0:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    28a2:	89 81       	ldd	r24, Y+1	; 0x01
    28a4:	80 68       	ori	r24, 0x80	; 128
    28a6:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_sendCommand>
}
    28aa:	0f 90       	pop	r0
    28ac:	0f 90       	pop	r0
    28ae:	0f 90       	pop	r0
    28b0:	0f 90       	pop	r0
    28b2:	0f 90       	pop	r0
    28b4:	cf 91       	pop	r28
    28b6:	df 91       	pop	r29
    28b8:	08 95       	ret

000028ba <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    28ba:	df 93       	push	r29
    28bc:	cf 93       	push	r28
    28be:	00 d0       	rcall	.+0      	; 0x28c0 <LCD_displayStringRowColumn+0x6>
    28c0:	00 d0       	rcall	.+0      	; 0x28c2 <LCD_displayStringRowColumn+0x8>
    28c2:	cd b7       	in	r28, 0x3d	; 61
    28c4:	de b7       	in	r29, 0x3e	; 62
    28c6:	89 83       	std	Y+1, r24	; 0x01
    28c8:	6a 83       	std	Y+2, r22	; 0x02
    28ca:	5c 83       	std	Y+4, r21	; 0x04
    28cc:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    28ce:	89 81       	ldd	r24, Y+1	; 0x01
    28d0:	6a 81       	ldd	r22, Y+2	; 0x02
    28d2:	0e 94 1b 14 	call	0x2836	; 0x2836 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    28d6:	8b 81       	ldd	r24, Y+3	; 0x03
    28d8:	9c 81       	ldd	r25, Y+4	; 0x04
    28da:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <LCD_displayString>
}
    28de:	0f 90       	pop	r0
    28e0:	0f 90       	pop	r0
    28e2:	0f 90       	pop	r0
    28e4:	0f 90       	pop	r0
    28e6:	cf 91       	pop	r28
    28e8:	df 91       	pop	r29
    28ea:	08 95       	ret

000028ec <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(uint16 data)
{
    28ec:	df 93       	push	r29
    28ee:	cf 93       	push	r28
    28f0:	cd b7       	in	r28, 0x3d	; 61
    28f2:	de b7       	in	r29, 0x3e	; 62
    28f4:	62 97       	sbiw	r28, 0x12	; 18
    28f6:	0f b6       	in	r0, 0x3f	; 63
    28f8:	f8 94       	cli
    28fa:	de bf       	out	0x3e, r29	; 62
    28fc:	0f be       	out	0x3f, r0	; 63
    28fe:	cd bf       	out	0x3d, r28	; 61
    2900:	9a 8b       	std	Y+18, r25	; 0x12
    2902:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2904:	89 89       	ldd	r24, Y+17	; 0x11
    2906:	9a 89       	ldd	r25, Y+18	; 0x12
    2908:	9e 01       	movw	r18, r28
    290a:	2f 5f       	subi	r18, 0xFF	; 255
    290c:	3f 4f       	sbci	r19, 0xFF	; 255
    290e:	b9 01       	movw	r22, r18
    2910:	4a e0       	ldi	r20, 0x0A	; 10
    2912:	50 e0       	ldi	r21, 0x00	; 0
    2914:	0e 94 01 17 	call	0x2e02	; 0x2e02 <itoa>
   LCD_displayString(buff); /* Display the string */
    2918:	ce 01       	movw	r24, r28
    291a:	01 96       	adiw	r24, 0x01	; 1
    291c:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <LCD_displayString>
}
    2920:	62 96       	adiw	r28, 0x12	; 18
    2922:	0f b6       	in	r0, 0x3f	; 63
    2924:	f8 94       	cli
    2926:	de bf       	out	0x3e, r29	; 62
    2928:	0f be       	out	0x3f, r0	; 63
    292a:	cd bf       	out	0x3d, r28	; 61
    292c:	cf 91       	pop	r28
    292e:	df 91       	pop	r29
    2930:	08 95       	ret

00002932 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2932:	df 93       	push	r29
    2934:	cf 93       	push	r28
    2936:	cd b7       	in	r28, 0x3d	; 61
    2938:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_sendCommand>
}
    2940:	cf 91       	pop	r28
    2942:	df 91       	pop	r29
    2944:	08 95       	ret

00002946 <__vector_9>:
/*******************************************************************************
 *                      		ISR                                            *
 *******************************************************************************/

ISR(TIMER1_OVF_vect)
{
    2946:	1f 92       	push	r1
    2948:	0f 92       	push	r0
    294a:	0f b6       	in	r0, 0x3f	; 63
    294c:	0f 92       	push	r0
    294e:	11 24       	eor	r1, r1
    2950:	2f 93       	push	r18
    2952:	3f 93       	push	r19
    2954:	4f 93       	push	r20
    2956:	5f 93       	push	r21
    2958:	6f 93       	push	r22
    295a:	7f 93       	push	r23
    295c:	8f 93       	push	r24
    295e:	9f 93       	push	r25
    2960:	af 93       	push	r26
    2962:	bf 93       	push	r27
    2964:	ef 93       	push	r30
    2966:	ff 93       	push	r31
    2968:	df 93       	push	r29
    296a:	cf 93       	push	r28
    296c:	cd b7       	in	r28, 0x3d	; 61
    296e:	de b7       	in	r29, 0x3e	; 62
	/* Call the Call Back function in the application after the edge is detected */
	if( g_callBackPtr != NULL_PTR)
    2970:	80 91 71 01 	lds	r24, 0x0171
    2974:	90 91 72 01 	lds	r25, 0x0172
    2978:	00 97       	sbiw	r24, 0x00	; 0
    297a:	29 f0       	breq	.+10     	; 0x2986 <__vector_9+0x40>
	{
		( *g_callBackPtr )(); /* another method to call the function using pointer to function g_callBackPtr(); */
    297c:	e0 91 71 01 	lds	r30, 0x0171
    2980:	f0 91 72 01 	lds	r31, 0x0172
    2984:	09 95       	icall
	}
}
    2986:	cf 91       	pop	r28
    2988:	df 91       	pop	r29
    298a:	ff 91       	pop	r31
    298c:	ef 91       	pop	r30
    298e:	bf 91       	pop	r27
    2990:	af 91       	pop	r26
    2992:	9f 91       	pop	r25
    2994:	8f 91       	pop	r24
    2996:	7f 91       	pop	r23
    2998:	6f 91       	pop	r22
    299a:	5f 91       	pop	r21
    299c:	4f 91       	pop	r20
    299e:	3f 91       	pop	r19
    29a0:	2f 91       	pop	r18
    29a2:	0f 90       	pop	r0
    29a4:	0f be       	out	0x3f, r0	; 63
    29a6:	0f 90       	pop	r0
    29a8:	1f 90       	pop	r1
    29aa:	18 95       	reti

000029ac <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    29ac:	1f 92       	push	r1
    29ae:	0f 92       	push	r0
    29b0:	0f b6       	in	r0, 0x3f	; 63
    29b2:	0f 92       	push	r0
    29b4:	11 24       	eor	r1, r1
    29b6:	2f 93       	push	r18
    29b8:	3f 93       	push	r19
    29ba:	4f 93       	push	r20
    29bc:	5f 93       	push	r21
    29be:	6f 93       	push	r22
    29c0:	7f 93       	push	r23
    29c2:	8f 93       	push	r24
    29c4:	9f 93       	push	r25
    29c6:	af 93       	push	r26
    29c8:	bf 93       	push	r27
    29ca:	ef 93       	push	r30
    29cc:	ff 93       	push	r31
    29ce:	df 93       	push	r29
    29d0:	cf 93       	push	r28
    29d2:	cd b7       	in	r28, 0x3d	; 61
    29d4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    29d6:	80 91 71 01 	lds	r24, 0x0171
    29da:	90 91 72 01 	lds	r25, 0x0172
    29de:	00 97       	sbiw	r24, 0x00	; 0
    29e0:	29 f0       	breq	.+10     	; 0x29ec <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    29e2:	e0 91 71 01 	lds	r30, 0x0171
    29e6:	f0 91 72 01 	lds	r31, 0x0172
    29ea:	09 95       	icall
	}

}
    29ec:	cf 91       	pop	r28
    29ee:	df 91       	pop	r29
    29f0:	ff 91       	pop	r31
    29f2:	ef 91       	pop	r30
    29f4:	bf 91       	pop	r27
    29f6:	af 91       	pop	r26
    29f8:	9f 91       	pop	r25
    29fa:	8f 91       	pop	r24
    29fc:	7f 91       	pop	r23
    29fe:	6f 91       	pop	r22
    2a00:	5f 91       	pop	r21
    2a02:	4f 91       	pop	r20
    2a04:	3f 91       	pop	r19
    2a06:	2f 91       	pop	r18
    2a08:	0f 90       	pop	r0
    2a0a:	0f be       	out	0x3f, r0	; 63
    2a0c:	0f 90       	pop	r0
    2a0e:	1f 90       	pop	r1
    2a10:	18 95       	reti

00002a12 <Timer1_init>:
/*
 * Description:
 * Function to initialize the Timer driver
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    2a12:	df 93       	push	r29
    2a14:	cf 93       	push	r28
    2a16:	00 d0       	rcall	.+0      	; 0x2a18 <Timer1_init+0x6>
    2a18:	cd b7       	in	r28, 0x3d	; 61
    2a1a:	de b7       	in	r29, 0x3e	; 62
    2a1c:	9a 83       	std	Y+2, r25	; 0x02
    2a1e:	89 83       	std	Y+1, r24	; 0x01
	 * 		1. COM1A1:0 = 0 0 Normal operation OC1A Disconnected
	 * 		2. COM1B1:0 = 0 0 Normal operation OC1B Disconnected
	 * 		3. FOC1A, B =  1  It's a non-PWM mode
	 * 		4. WGM 11:0 = 0 0 They are set to zero in CTC and normal
	 */
	TCCR1A |= (1<< FOC1A) | (1<<FOC1B);
    2a20:	af e4       	ldi	r26, 0x4F	; 79
    2a22:	b0 e0       	ldi	r27, 0x00	; 0
    2a24:	ef e4       	ldi	r30, 0x4F	; 79
    2a26:	f0 e0       	ldi	r31, 0x00	; 0
    2a28:	80 81       	ld	r24, Z
    2a2a:	8c 60       	ori	r24, 0x0C	; 12
    2a2c:	8c 93       	st	X, r24
	 * 		2. ICES1    = 0
	 * 		4. WGM12    = Configurable between CTC and normal
	 * 		5. CS12:0   = Clock Configuration
	 */

	TCCR1B = Config_Ptr->prescaler; // Sets the Configuration prescaler
    2a2e:	ae e4       	ldi	r26, 0x4E	; 78
    2a30:	b0 e0       	ldi	r27, 0x00	; 0
    2a32:	e9 81       	ldd	r30, Y+1	; 0x01
    2a34:	fa 81       	ldd	r31, Y+2	; 0x02
    2a36:	84 81       	ldd	r24, Z+4	; 0x04
    2a38:	8c 93       	st	X, r24
	TCCR1B = ( TCCR1B & (0XF7) ) | ( ( (Config_Ptr)->mode ) << WGM12 ); // Mode Select
    2a3a:	ae e4       	ldi	r26, 0x4E	; 78
    2a3c:	b0 e0       	ldi	r27, 0x00	; 0
    2a3e:	ee e4       	ldi	r30, 0x4E	; 78
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	80 81       	ld	r24, Z
    2a44:	28 2f       	mov	r18, r24
    2a46:	27 7f       	andi	r18, 0xF7	; 247
    2a48:	e9 81       	ldd	r30, Y+1	; 0x01
    2a4a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a4c:	85 81       	ldd	r24, Z+5	; 0x05
    2a4e:	88 2f       	mov	r24, r24
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	88 0f       	add	r24, r24
    2a54:	99 1f       	adc	r25, r25
    2a56:	88 0f       	add	r24, r24
    2a58:	99 1f       	adc	r25, r25
    2a5a:	88 0f       	add	r24, r24
    2a5c:	99 1f       	adc	r25, r25
    2a5e:	82 2b       	or	r24, r18
    2a60:	8c 93       	st	X, r24

	TCNT1  = Config_Ptr->initial_value;
    2a62:	ac e4       	ldi	r26, 0x4C	; 76
    2a64:	b0 e0       	ldi	r27, 0x00	; 0
    2a66:	e9 81       	ldd	r30, Y+1	; 0x01
    2a68:	fa 81       	ldd	r31, Y+2	; 0x02
    2a6a:	80 81       	ld	r24, Z
    2a6c:	91 81       	ldd	r25, Z+1	; 0x01
    2a6e:	11 96       	adiw	r26, 0x01	; 1
    2a70:	9c 93       	st	X, r25
    2a72:	8e 93       	st	-X, r24

	if( ( (Config_Ptr)->mode ) == TIMER_CTC)
    2a74:	e9 81       	ldd	r30, Y+1	; 0x01
    2a76:	fa 81       	ldd	r31, Y+2	; 0x02
    2a78:	85 81       	ldd	r24, Z+5	; 0x05
    2a7a:	81 30       	cpi	r24, 0x01	; 1
    2a7c:	71 f4       	brne	.+28     	; 0x2a9a <Timer1_init+0x88>
	{
		/*
		 *	1. Configure to the set compare value
		 *	2. Output Compare A match interrupt is enabled
		 */
		OCR1A = Config_Ptr->compare_value;
    2a7e:	aa e4       	ldi	r26, 0x4A	; 74
    2a80:	b0 e0       	ldi	r27, 0x00	; 0
    2a82:	e9 81       	ldd	r30, Y+1	; 0x01
    2a84:	fa 81       	ldd	r31, Y+2	; 0x02
    2a86:	82 81       	ldd	r24, Z+2	; 0x02
    2a88:	93 81       	ldd	r25, Z+3	; 0x03
    2a8a:	11 96       	adiw	r26, 0x01	; 1
    2a8c:	9c 93       	st	X, r25
    2a8e:	8e 93       	st	-X, r24
		TIMSK = (1<<OCIE1A);
    2a90:	e9 e5       	ldi	r30, 0x59	; 89
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	80 e1       	ldi	r24, 0x10	; 16
    2a96:	80 83       	st	Z, r24
    2a98:	09 c0       	rjmp	.+18     	; 0x2aac <Timer1_init+0x9a>
	}
	else if( ( (Config_Ptr)->mode ) == TIMER_NORMAL)
    2a9a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a9c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a9e:	85 81       	ldd	r24, Z+5	; 0x05
    2aa0:	88 23       	and	r24, r24
    2aa2:	21 f4       	brne	.+8      	; 0x2aac <Timer1_init+0x9a>
	{
		/* Enable overflow flag */
		TIMSK = (1<<TOIE1);
    2aa4:	e9 e5       	ldi	r30, 0x59	; 89
    2aa6:	f0 e0       	ldi	r31, 0x00	; 0
    2aa8:	84 e0       	ldi	r24, 0x04	; 4
    2aaa:	80 83       	st	Z, r24
	}
}
    2aac:	0f 90       	pop	r0
    2aae:	0f 90       	pop	r0
    2ab0:	cf 91       	pop	r28
    2ab2:	df 91       	pop	r29
    2ab4:	08 95       	ret

00002ab6 <Timer1_deInit>:
/*
 * Description:
 * Function to disable the Timer1
 */
void Timer1_deInit(void)
{
    2ab6:	df 93       	push	r29
    2ab8:	cf 93       	push	r28
    2aba:	cd b7       	in	r28, 0x3d	; 61
    2abc:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    2abe:	ef e4       	ldi	r30, 0x4F	; 79
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	10 82       	st	Z, r1
	TCCR1B = 0;
    2ac4:	ee e4       	ldi	r30, 0x4E	; 78
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	10 82       	st	Z, r1
	TCNT1  = 0;
    2aca:	ec e4       	ldi	r30, 0x4C	; 76
    2acc:	f0 e0       	ldi	r31, 0x00	; 0
    2ace:	11 82       	std	Z+1, r1	; 0x01
    2ad0:	10 82       	st	Z, r1
	OCR1A  = 0;
    2ad2:	ea e4       	ldi	r30, 0x4A	; 74
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	11 82       	std	Z+1, r1	; 0x01
    2ad8:	10 82       	st	Z, r1
	TIMSK  = 0;
    2ada:	e9 e5       	ldi	r30, 0x59	; 89
    2adc:	f0 e0       	ldi	r31, 0x00	; 0
    2ade:	10 82       	st	Z, r1
}
    2ae0:	cf 91       	pop	r28
    2ae2:	df 91       	pop	r29
    2ae4:	08 95       	ret

00002ae6 <Timer1_setCallBack>:
 * Description:
 * Function to set the Call Back function address
 */

void Timer1_setCallBack(void(*a_ptr)(void))
{
    2ae6:	df 93       	push	r29
    2ae8:	cf 93       	push	r28
    2aea:	00 d0       	rcall	.+0      	; 0x2aec <Timer1_setCallBack+0x6>
    2aec:	cd b7       	in	r28, 0x3d	; 61
    2aee:	de b7       	in	r29, 0x3e	; 62
    2af0:	9a 83       	std	Y+2, r25	; 0x02
    2af2:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    2af4:	89 81       	ldd	r24, Y+1	; 0x01
    2af6:	9a 81       	ldd	r25, Y+2	; 0x02
    2af8:	90 93 72 01 	sts	0x0172, r25
    2afc:	80 93 71 01 	sts	0x0171, r24
}
    2b00:	0f 90       	pop	r0
    2b02:	0f 90       	pop	r0
    2b04:	cf 91       	pop	r28
    2b06:	df 91       	pop	r29
    2b08:	08 95       	ret

00002b0a <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *Config_Ptr)
{
    2b0a:	df 93       	push	r29
    2b0c:	cf 93       	push	r28
    2b0e:	00 d0       	rcall	.+0      	; 0x2b10 <UART_init+0x6>
    2b10:	00 d0       	rcall	.+0      	; 0x2b12 <UART_init+0x8>
    2b12:	cd b7       	in	r28, 0x3d	; 61
    2b14:	de b7       	in	r29, 0x3e	; 62
    2b16:	9c 83       	std	Y+4, r25	; 0x04
    2b18:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2b1a:	1a 82       	std	Y+2, r1	; 0x02
    2b1c:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2b1e:	eb e2       	ldi	r30, 0x2B	; 43
    2b20:	f0 e0       	ldi	r31, 0x00	; 0
    2b22:	82 e0       	ldi	r24, 0x02	; 2
    2b24:	80 83       	st	Z, r24
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
#if POLLING1_INTERRUPT0==0
	UCSRB = (1<<RXEN) | (1<<TXEN) | (1<<RXCIE) | (1<<TXCIE);
#elif POLLING1_INTERRUPT0==1
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2b26:	ea e2       	ldi	r30, 0x2A	; 42
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	88 e1       	ldi	r24, 0x18	; 24
    2b2c:	80 83       	st	Z, r24
#endif

	UCSRB = (UCSRB & (0XFB) ) | ( (Config_Ptr->CharSize) & (0X04));
    2b2e:	aa e2       	ldi	r26, 0x2A	; 42
    2b30:	b0 e0       	ldi	r27, 0x00	; 0
    2b32:	ea e2       	ldi	r30, 0x2A	; 42
    2b34:	f0 e0       	ldi	r31, 0x00	; 0
    2b36:	80 81       	ld	r24, Z
    2b38:	98 2f       	mov	r25, r24
    2b3a:	9b 7f       	andi	r25, 0xFB	; 251
    2b3c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b3e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b40:	80 81       	ld	r24, Z
    2b42:	84 70       	andi	r24, 0x04	; 4
    2b44:	89 2b       	or	r24, r25
    2b46:	8c 93       	st	X, r24
	 * UPM1:0  = Configurable 00 10 11
	 * USBS    = 0 One stop bit / 1 Two bit
	 * UCSZ1:0 = Configurable
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC |= (1<<URSEL);
    2b48:	a0 e4       	ldi	r26, 0x40	; 64
    2b4a:	b0 e0       	ldi	r27, 0x00	; 0
    2b4c:	e0 e4       	ldi	r30, 0x40	; 64
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	80 81       	ld	r24, Z
    2b52:	80 68       	ori	r24, 0x80	; 128
    2b54:	8c 93       	st	X, r24
	UCSRC = (UCSRC & (0XCF) ) | ( (Config_Ptr->Parity)<<4 );
    2b56:	a0 e4       	ldi	r26, 0x40	; 64
    2b58:	b0 e0       	ldi	r27, 0x00	; 0
    2b5a:	e0 e4       	ldi	r30, 0x40	; 64
    2b5c:	f0 e0       	ldi	r31, 0x00	; 0
    2b5e:	80 81       	ld	r24, Z
    2b60:	28 2f       	mov	r18, r24
    2b62:	2f 7c       	andi	r18, 0xCF	; 207
    2b64:	eb 81       	ldd	r30, Y+3	; 0x03
    2b66:	fc 81       	ldd	r31, Y+4	; 0x04
    2b68:	81 81       	ldd	r24, Z+1	; 0x01
    2b6a:	88 2f       	mov	r24, r24
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	82 95       	swap	r24
    2b70:	92 95       	swap	r25
    2b72:	90 7f       	andi	r25, 0xF0	; 240
    2b74:	98 27       	eor	r25, r24
    2b76:	80 7f       	andi	r24, 0xF0	; 240
    2b78:	98 27       	eor	r25, r24
    2b7a:	82 2b       	or	r24, r18
    2b7c:	8c 93       	st	X, r24
	UCSRC = (UCSRC & (0XF7) ) | ( (Config_Ptr->Stop)<<3 );
    2b7e:	a0 e4       	ldi	r26, 0x40	; 64
    2b80:	b0 e0       	ldi	r27, 0x00	; 0
    2b82:	e0 e4       	ldi	r30, 0x40	; 64
    2b84:	f0 e0       	ldi	r31, 0x00	; 0
    2b86:	80 81       	ld	r24, Z
    2b88:	28 2f       	mov	r18, r24
    2b8a:	27 7f       	andi	r18, 0xF7	; 247
    2b8c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b8e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b90:	82 81       	ldd	r24, Z+2	; 0x02
    2b92:	88 2f       	mov	r24, r24
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	88 0f       	add	r24, r24
    2b98:	99 1f       	adc	r25, r25
    2b9a:	88 0f       	add	r24, r24
    2b9c:	99 1f       	adc	r25, r25
    2b9e:	88 0f       	add	r24, r24
    2ba0:	99 1f       	adc	r25, r25
    2ba2:	82 2b       	or	r24, r18
    2ba4:	8c 93       	st	X, r24
	UCSRC = (UCSRC & (0XF9) ) | ( ( (Config_Ptr->CharSize) & (0X03) )<<1 );
    2ba6:	a0 e4       	ldi	r26, 0x40	; 64
    2ba8:	b0 e0       	ldi	r27, 0x00	; 0
    2baa:	e0 e4       	ldi	r30, 0x40	; 64
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	80 81       	ld	r24, Z
    2bb0:	28 2f       	mov	r18, r24
    2bb2:	29 7f       	andi	r18, 0xF9	; 249
    2bb4:	eb 81       	ldd	r30, Y+3	; 0x03
    2bb6:	fc 81       	ldd	r31, Y+4	; 0x04
    2bb8:	80 81       	ld	r24, Z
    2bba:	88 2f       	mov	r24, r24
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	83 70       	andi	r24, 0x03	; 3
    2bc0:	90 70       	andi	r25, 0x00	; 0
    2bc2:	88 0f       	add	r24, r24
    2bc4:	99 1f       	adc	r25, r25
    2bc6:	82 2b       	or	r24, r18
    2bc8:	8c 93       	st	X, r24


	/* Calculate the UBRR register value */
	ubrr_value = (uint16) ( ( ( (F_CPU / (Config_Ptr->Baud_Rate) * 8UL) ) ) - 1);
    2bca:	eb 81       	ldd	r30, Y+3	; 0x03
    2bcc:	fc 81       	ldd	r31, Y+4	; 0x04
    2bce:	23 81       	ldd	r18, Z+3	; 0x03
    2bd0:	34 81       	ldd	r19, Z+4	; 0x04
    2bd2:	45 81       	ldd	r20, Z+5	; 0x05
    2bd4:	56 81       	ldd	r21, Z+6	; 0x06
    2bd6:	80 e0       	ldi	r24, 0x00	; 0
    2bd8:	92 e1       	ldi	r25, 0x12	; 18
    2bda:	aa e7       	ldi	r26, 0x7A	; 122
    2bdc:	b0 e0       	ldi	r27, 0x00	; 0
    2bde:	bc 01       	movw	r22, r24
    2be0:	cd 01       	movw	r24, r26
    2be2:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <__udivmodsi4>
    2be6:	da 01       	movw	r26, r20
    2be8:	c9 01       	movw	r24, r18
    2bea:	88 0f       	add	r24, r24
    2bec:	99 1f       	adc	r25, r25
    2bee:	aa 1f       	adc	r26, r26
    2bf0:	bb 1f       	adc	r27, r27
    2bf2:	88 0f       	add	r24, r24
    2bf4:	99 1f       	adc	r25, r25
    2bf6:	aa 1f       	adc	r26, r26
    2bf8:	bb 1f       	adc	r27, r27
    2bfa:	88 0f       	add	r24, r24
    2bfc:	99 1f       	adc	r25, r25
    2bfe:	aa 1f       	adc	r26, r26
    2c00:	bb 1f       	adc	r27, r27
    2c02:	01 97       	sbiw	r24, 0x01	; 1
    2c04:	9a 83       	std	Y+2, r25	; 0x02
    2c06:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2c08:	e0 e4       	ldi	r30, 0x40	; 64
    2c0a:	f0 e0       	ldi	r31, 0x00	; 0
    2c0c:	89 81       	ldd	r24, Y+1	; 0x01
    2c0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c10:	89 2f       	mov	r24, r25
    2c12:	99 27       	eor	r25, r25
    2c14:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2c16:	e9 e2       	ldi	r30, 0x29	; 41
    2c18:	f0 e0       	ldi	r31, 0x00	; 0
    2c1a:	89 81       	ldd	r24, Y+1	; 0x01
    2c1c:	80 83       	st	Z, r24
}
    2c1e:	0f 90       	pop	r0
    2c20:	0f 90       	pop	r0
    2c22:	0f 90       	pop	r0
    2c24:	0f 90       	pop	r0
    2c26:	cf 91       	pop	r28
    2c28:	df 91       	pop	r29
    2c2a:	08 95       	ret

00002c2c <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2c2c:	df 93       	push	r29
    2c2e:	cf 93       	push	r28
    2c30:	0f 92       	push	r0
    2c32:	cd b7       	in	r28, 0x3d	; 61
    2c34:	de b7       	in	r29, 0x3e	; 62
    2c36:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2c38:	eb e2       	ldi	r30, 0x2B	; 43
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	80 81       	ld	r24, Z
    2c3e:	88 2f       	mov	r24, r24
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	80 72       	andi	r24, 0x20	; 32
    2c44:	90 70       	andi	r25, 0x00	; 0
    2c46:	00 97       	sbiw	r24, 0x00	; 0
    2c48:	b9 f3       	breq	.-18     	; 0x2c38 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2c4a:	ec e2       	ldi	r30, 0x2C	; 44
    2c4c:	f0 e0       	ldi	r31, 0x00	; 0
    2c4e:	89 81       	ldd	r24, Y+1	; 0x01
    2c50:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2c52:	0f 90       	pop	r0
    2c54:	cf 91       	pop	r28
    2c56:	df 91       	pop	r29
    2c58:	08 95       	ret

00002c5a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2c5a:	df 93       	push	r29
    2c5c:	cf 93       	push	r28
    2c5e:	cd b7       	in	r28, 0x3d	; 61
    2c60:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2c62:	eb e2       	ldi	r30, 0x2B	; 43
    2c64:	f0 e0       	ldi	r31, 0x00	; 0
    2c66:	80 81       	ld	r24, Z
    2c68:	88 23       	and	r24, r24
    2c6a:	dc f7       	brge	.-10     	; 0x2c62 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    2c6c:	ec e2       	ldi	r30, 0x2C	; 44
    2c6e:	f0 e0       	ldi	r31, 0x00	; 0
    2c70:	80 81       	ld	r24, Z
}
    2c72:	cf 91       	pop	r28
    2c74:	df 91       	pop	r29
    2c76:	08 95       	ret

00002c78 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2c78:	df 93       	push	r29
    2c7a:	cf 93       	push	r28
    2c7c:	00 d0       	rcall	.+0      	; 0x2c7e <UART_sendString+0x6>
    2c7e:	0f 92       	push	r0
    2c80:	cd b7       	in	r28, 0x3d	; 61
    2c82:	de b7       	in	r29, 0x3e	; 62
    2c84:	9b 83       	std	Y+3, r25	; 0x03
    2c86:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c88:	19 82       	std	Y+1, r1	; 0x01
    2c8a:	0e c0       	rjmp	.+28     	; 0x2ca8 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2c8c:	89 81       	ldd	r24, Y+1	; 0x01
    2c8e:	28 2f       	mov	r18, r24
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	8a 81       	ldd	r24, Y+2	; 0x02
    2c94:	9b 81       	ldd	r25, Y+3	; 0x03
    2c96:	fc 01       	movw	r30, r24
    2c98:	e2 0f       	add	r30, r18
    2c9a:	f3 1f       	adc	r31, r19
    2c9c:	80 81       	ld	r24, Z
    2c9e:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <UART_sendByte>
		i++;
    2ca2:	89 81       	ldd	r24, Y+1	; 0x01
    2ca4:	8f 5f       	subi	r24, 0xFF	; 255
    2ca6:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2ca8:	89 81       	ldd	r24, Y+1	; 0x01
    2caa:	28 2f       	mov	r18, r24
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb0:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb2:	fc 01       	movw	r30, r24
    2cb4:	e2 0f       	add	r30, r18
    2cb6:	f3 1f       	adc	r31, r19
    2cb8:	80 81       	ld	r24, Z
    2cba:	88 23       	and	r24, r24
    2cbc:	39 f7       	brne	.-50     	; 0x2c8c <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    2cbe:	0f 90       	pop	r0
    2cc0:	0f 90       	pop	r0
    2cc2:	0f 90       	pop	r0
    2cc4:	cf 91       	pop	r28
    2cc6:	df 91       	pop	r29
    2cc8:	08 95       	ret

00002cca <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2cca:	0f 93       	push	r16
    2ccc:	1f 93       	push	r17
    2cce:	df 93       	push	r29
    2cd0:	cf 93       	push	r28
    2cd2:	00 d0       	rcall	.+0      	; 0x2cd4 <UART_receiveString+0xa>
    2cd4:	0f 92       	push	r0
    2cd6:	cd b7       	in	r28, 0x3d	; 61
    2cd8:	de b7       	in	r29, 0x3e	; 62
    2cda:	9b 83       	std	Y+3, r25	; 0x03
    2cdc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2cde:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2ce0:	89 81       	ldd	r24, Y+1	; 0x01
    2ce2:	28 2f       	mov	r18, r24
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce8:	9b 81       	ldd	r25, Y+3	; 0x03
    2cea:	8c 01       	movw	r16, r24
    2cec:	02 0f       	add	r16, r18
    2cee:	13 1f       	adc	r17, r19
    2cf0:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <UART_recieveByte>
    2cf4:	f8 01       	movw	r30, r16
    2cf6:	80 83       	st	Z, r24
    2cf8:	0f c0       	rjmp	.+30     	; 0x2d18 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2cfa:	89 81       	ldd	r24, Y+1	; 0x01
    2cfc:	8f 5f       	subi	r24, 0xFF	; 255
    2cfe:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2d00:	89 81       	ldd	r24, Y+1	; 0x01
    2d02:	28 2f       	mov	r18, r24
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	8a 81       	ldd	r24, Y+2	; 0x02
    2d08:	9b 81       	ldd	r25, Y+3	; 0x03
    2d0a:	8c 01       	movw	r16, r24
    2d0c:	02 0f       	add	r16, r18
    2d0e:	13 1f       	adc	r17, r19
    2d10:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <UART_recieveByte>
    2d14:	f8 01       	movw	r30, r16
    2d16:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2d18:	89 81       	ldd	r24, Y+1	; 0x01
    2d1a:	28 2f       	mov	r18, r24
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d20:	9b 81       	ldd	r25, Y+3	; 0x03
    2d22:	fc 01       	movw	r30, r24
    2d24:	e2 0f       	add	r30, r18
    2d26:	f3 1f       	adc	r31, r19
    2d28:	80 81       	ld	r24, Z
    2d2a:	83 32       	cpi	r24, 0x23	; 35
    2d2c:	31 f7       	brne	.-52     	; 0x2cfa <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2d2e:	89 81       	ldd	r24, Y+1	; 0x01
    2d30:	28 2f       	mov	r18, r24
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	8a 81       	ldd	r24, Y+2	; 0x02
    2d36:	9b 81       	ldd	r25, Y+3	; 0x03
    2d38:	fc 01       	movw	r30, r24
    2d3a:	e2 0f       	add	r30, r18
    2d3c:	f3 1f       	adc	r31, r19
    2d3e:	10 82       	st	Z, r1
}
    2d40:	0f 90       	pop	r0
    2d42:	0f 90       	pop	r0
    2d44:	0f 90       	pop	r0
    2d46:	cf 91       	pop	r28
    2d48:	df 91       	pop	r29
    2d4a:	1f 91       	pop	r17
    2d4c:	0f 91       	pop	r16
    2d4e:	08 95       	ret

00002d50 <__udivmodsi4>:
    2d50:	a1 e2       	ldi	r26, 0x21	; 33
    2d52:	1a 2e       	mov	r1, r26
    2d54:	aa 1b       	sub	r26, r26
    2d56:	bb 1b       	sub	r27, r27
    2d58:	fd 01       	movw	r30, r26
    2d5a:	0d c0       	rjmp	.+26     	; 0x2d76 <__udivmodsi4_ep>

00002d5c <__udivmodsi4_loop>:
    2d5c:	aa 1f       	adc	r26, r26
    2d5e:	bb 1f       	adc	r27, r27
    2d60:	ee 1f       	adc	r30, r30
    2d62:	ff 1f       	adc	r31, r31
    2d64:	a2 17       	cp	r26, r18
    2d66:	b3 07       	cpc	r27, r19
    2d68:	e4 07       	cpc	r30, r20
    2d6a:	f5 07       	cpc	r31, r21
    2d6c:	20 f0       	brcs	.+8      	; 0x2d76 <__udivmodsi4_ep>
    2d6e:	a2 1b       	sub	r26, r18
    2d70:	b3 0b       	sbc	r27, r19
    2d72:	e4 0b       	sbc	r30, r20
    2d74:	f5 0b       	sbc	r31, r21

00002d76 <__udivmodsi4_ep>:
    2d76:	66 1f       	adc	r22, r22
    2d78:	77 1f       	adc	r23, r23
    2d7a:	88 1f       	adc	r24, r24
    2d7c:	99 1f       	adc	r25, r25
    2d7e:	1a 94       	dec	r1
    2d80:	69 f7       	brne	.-38     	; 0x2d5c <__udivmodsi4_loop>
    2d82:	60 95       	com	r22
    2d84:	70 95       	com	r23
    2d86:	80 95       	com	r24
    2d88:	90 95       	com	r25
    2d8a:	9b 01       	movw	r18, r22
    2d8c:	ac 01       	movw	r20, r24
    2d8e:	bd 01       	movw	r22, r26
    2d90:	cf 01       	movw	r24, r30
    2d92:	08 95       	ret

00002d94 <__prologue_saves__>:
    2d94:	2f 92       	push	r2
    2d96:	3f 92       	push	r3
    2d98:	4f 92       	push	r4
    2d9a:	5f 92       	push	r5
    2d9c:	6f 92       	push	r6
    2d9e:	7f 92       	push	r7
    2da0:	8f 92       	push	r8
    2da2:	9f 92       	push	r9
    2da4:	af 92       	push	r10
    2da6:	bf 92       	push	r11
    2da8:	cf 92       	push	r12
    2daa:	df 92       	push	r13
    2dac:	ef 92       	push	r14
    2dae:	ff 92       	push	r15
    2db0:	0f 93       	push	r16
    2db2:	1f 93       	push	r17
    2db4:	cf 93       	push	r28
    2db6:	df 93       	push	r29
    2db8:	cd b7       	in	r28, 0x3d	; 61
    2dba:	de b7       	in	r29, 0x3e	; 62
    2dbc:	ca 1b       	sub	r28, r26
    2dbe:	db 0b       	sbc	r29, r27
    2dc0:	0f b6       	in	r0, 0x3f	; 63
    2dc2:	f8 94       	cli
    2dc4:	de bf       	out	0x3e, r29	; 62
    2dc6:	0f be       	out	0x3f, r0	; 63
    2dc8:	cd bf       	out	0x3d, r28	; 61
    2dca:	09 94       	ijmp

00002dcc <__epilogue_restores__>:
    2dcc:	2a 88       	ldd	r2, Y+18	; 0x12
    2dce:	39 88       	ldd	r3, Y+17	; 0x11
    2dd0:	48 88       	ldd	r4, Y+16	; 0x10
    2dd2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2dd4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2dd6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2dd8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2dda:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ddc:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dde:	b9 84       	ldd	r11, Y+9	; 0x09
    2de0:	c8 84       	ldd	r12, Y+8	; 0x08
    2de2:	df 80       	ldd	r13, Y+7	; 0x07
    2de4:	ee 80       	ldd	r14, Y+6	; 0x06
    2de6:	fd 80       	ldd	r15, Y+5	; 0x05
    2de8:	0c 81       	ldd	r16, Y+4	; 0x04
    2dea:	1b 81       	ldd	r17, Y+3	; 0x03
    2dec:	aa 81       	ldd	r26, Y+2	; 0x02
    2dee:	b9 81       	ldd	r27, Y+1	; 0x01
    2df0:	ce 0f       	add	r28, r30
    2df2:	d1 1d       	adc	r29, r1
    2df4:	0f b6       	in	r0, 0x3f	; 63
    2df6:	f8 94       	cli
    2df8:	de bf       	out	0x3e, r29	; 62
    2dfa:	0f be       	out	0x3f, r0	; 63
    2dfc:	cd bf       	out	0x3d, r28	; 61
    2dfe:	ed 01       	movw	r28, r26
    2e00:	08 95       	ret

00002e02 <itoa>:
    2e02:	fb 01       	movw	r30, r22
    2e04:	9f 01       	movw	r18, r30
    2e06:	e8 94       	clt
    2e08:	42 30       	cpi	r20, 0x02	; 2
    2e0a:	c4 f0       	brlt	.+48     	; 0x2e3c <itoa+0x3a>
    2e0c:	45 32       	cpi	r20, 0x25	; 37
    2e0e:	b4 f4       	brge	.+44     	; 0x2e3c <itoa+0x3a>
    2e10:	4a 30       	cpi	r20, 0x0A	; 10
    2e12:	29 f4       	brne	.+10     	; 0x2e1e <itoa+0x1c>
    2e14:	97 fb       	bst	r25, 7
    2e16:	1e f4       	brtc	.+6      	; 0x2e1e <itoa+0x1c>
    2e18:	90 95       	com	r25
    2e1a:	81 95       	neg	r24
    2e1c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e1e:	64 2f       	mov	r22, r20
    2e20:	77 27       	eor	r23, r23
    2e22:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__udivmodhi4>
    2e26:	80 5d       	subi	r24, 0xD0	; 208
    2e28:	8a 33       	cpi	r24, 0x3A	; 58
    2e2a:	0c f0       	brlt	.+2      	; 0x2e2e <itoa+0x2c>
    2e2c:	89 5d       	subi	r24, 0xD9	; 217
    2e2e:	81 93       	st	Z+, r24
    2e30:	cb 01       	movw	r24, r22
    2e32:	00 97       	sbiw	r24, 0x00	; 0
    2e34:	a1 f7       	brne	.-24     	; 0x2e1e <itoa+0x1c>
    2e36:	16 f4       	brtc	.+4      	; 0x2e3c <itoa+0x3a>
    2e38:	5d e2       	ldi	r21, 0x2D	; 45
    2e3a:	51 93       	st	Z+, r21
    2e3c:	10 82       	st	Z, r1
    2e3e:	c9 01       	movw	r24, r18
    2e40:	0c 94 22 17 	jmp	0x2e44	; 0x2e44 <strrev>

00002e44 <strrev>:
    2e44:	dc 01       	movw	r26, r24
    2e46:	fc 01       	movw	r30, r24
    2e48:	67 2f       	mov	r22, r23
    2e4a:	71 91       	ld	r23, Z+
    2e4c:	77 23       	and	r23, r23
    2e4e:	e1 f7       	brne	.-8      	; 0x2e48 <strrev+0x4>
    2e50:	32 97       	sbiw	r30, 0x02	; 2
    2e52:	04 c0       	rjmp	.+8      	; 0x2e5c <strrev+0x18>
    2e54:	7c 91       	ld	r23, X
    2e56:	6d 93       	st	X+, r22
    2e58:	70 83       	st	Z, r23
    2e5a:	62 91       	ld	r22, -Z
    2e5c:	ae 17       	cp	r26, r30
    2e5e:	bf 07       	cpc	r27, r31
    2e60:	c8 f3       	brcs	.-14     	; 0x2e54 <strrev+0x10>
    2e62:	08 95       	ret

00002e64 <__udivmodhi4>:
    2e64:	aa 1b       	sub	r26, r26
    2e66:	bb 1b       	sub	r27, r27
    2e68:	51 e1       	ldi	r21, 0x11	; 17
    2e6a:	07 c0       	rjmp	.+14     	; 0x2e7a <__udivmodhi4_ep>

00002e6c <__udivmodhi4_loop>:
    2e6c:	aa 1f       	adc	r26, r26
    2e6e:	bb 1f       	adc	r27, r27
    2e70:	a6 17       	cp	r26, r22
    2e72:	b7 07       	cpc	r27, r23
    2e74:	10 f0       	brcs	.+4      	; 0x2e7a <__udivmodhi4_ep>
    2e76:	a6 1b       	sub	r26, r22
    2e78:	b7 0b       	sbc	r27, r23

00002e7a <__udivmodhi4_ep>:
    2e7a:	88 1f       	adc	r24, r24
    2e7c:	99 1f       	adc	r25, r25
    2e7e:	5a 95       	dec	r21
    2e80:	a9 f7       	brne	.-22     	; 0x2e6c <__udivmodhi4_loop>
    2e82:	80 95       	com	r24
    2e84:	90 95       	com	r25
    2e86:	bc 01       	movw	r22, r24
    2e88:	cd 01       	movw	r24, r26
    2e8a:	08 95       	ret

00002e8c <_exit>:
    2e8c:	f8 94       	cli

00002e8e <__stop_program>:
    2e8e:	ff cf       	rjmp	.-2      	; 0x2e8e <__stop_program>
